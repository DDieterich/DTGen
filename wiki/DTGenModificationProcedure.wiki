#summary Procedure for Modifying Basic DTGen Structure.

= Introduction =

Since DTGen generates DTGen, there is a need for 2 DTGen(s) during development:

  * Old DTGen to generate the new DTGen
  * New DTGen to test prior to overwriting the old DTGen

The following procedure is a way to accomplish that effort.  The following environment is assumed for the procedure:

  * The "trunk" directory is up-to-date from Sub-Version
  * DTGen is installed in schema "dtgen" in an Oracle database
  * The DTGen GUI (f900) is installed in the same Oracle database.


= Details =

== Complete Changes to Old DTGen ==

Ensure that the changes to Old DTGen are as complete as possible.  Do not make any changes to Old DTGen that will cause it not to work.  The Old DTGen will be copied to a new location.  Any changes to Old DTGen, after the copy is made, will need to be duplicated in the New DTGen

With this step complete, commit changes to Sub-Version.


== Setup the Test Environment ==

If a previous test environment remains, run this command in the "trunk/test" directory to remove it.

  * ./t.sh remove

Review and modify as necessary the following scripts:

  * trunk/test/t.sh
  * trunk/test/dtgen/t.env
  * trunk/test/dtgen/setup.sh
  * trunk/test/dtgen/test.sh
  * trunk/test/dtgen/cleanup.sh
  * trunk/test/dtgen/remove.sh
  * trunk/test/dtgen/dtgen_dataload2.ctl
  * trunk/test/????

Run this command in the "trunk/test" directory to setup the test environment.

  * ./t.sh setup


== Set the APEX Configuration for Testing ==

Run APEX and add the test environment schema (dtgen_test) to the workspace that contains the DTGen APEX application (ID 900).

Run the DTGen GUI and change the "Schema Name" for the DTGen application to the test environment (dtgen_test).  With care, the "Schema Name" can be set to "&1".  The test environment schema name would need to be passed to ?????????

== Test Generate the New DTGen ==

This is the first test of the New DTGen.  It is likely that the "compl.sql" script will produce errors.  This is not a problem, so long as the New DTGen generates successfully from the Old DTGen and loads into the test environment successfully.  The command for performing this first test is run from the "trunk/test" directory:

  * ./t.sh test dtgen

Note: If this command needs to be run repeatedly, the SQL*Loader control file "dtgen_dataload2.ctl" can be created.  The "trunk/dtgen/test.sh" script will not overwrite "dtgen_dataload2.ctl".  The "trunk/dtgen/test.sh" file will use "dtgen_dataload2.ctl", instead of "dtgen_dataload.ctl", if "dtgen_dataload2.ctl" exists.


== Copy Program/Module Source to New DTGen ==

Copy the following Program/Module Sources from "trunk/src" to "trunk/test/dtgen":

  * comp.sql
  * dtgen_util.pkb
  * dtgen_util.pks
  * generate.pkb
  * generate.pks
  * gui_app_tree_vw.sql
  * gui_util.pkb
  * gui_util.pks

== Complete Changes to New DTGen ==

The above listed Program/Module Sources can be compiled and tested against the New DTGen installation in the test environment.  Additionally, the dtgen_dataload.ctl can be modified and tested.  With this step complete, the New DTGen should be fully available in the database with all source compiled and dtgen_dataload.ctl loaded.

With this step complete, commit changes to Sub-Version.


== Update APEX GUI ==

Switch the compile schema for APEX application 900 to the test environment.  Install the new APEX GUI forms:

  * sqlplus (owner)/(password)
  * SQL> spool install_gui
  * SQL> @install_gui
  * SQL> exit

Open the DTGen APEX application (f900) in the APEX editor and review the page numbers below 1000 for changes.

Export the application to trunk/test/dtgen and commit changes to Sub-Version.


== Update Demo Directory ==

???


== Overwrite Old DTGen Program/Module Source ==

Copy the following Program/Module Sources from "trunk/test/dtgen" to "trunk/src":

  * comp.sql
  * dtgen_util.pkb
  * dtgen_util.pks
  * generate.pkb
  * generate.pks
  * gui_app_tree_vw.sql
  * gui_util.pkb
  * gui_util.pks

Additionally, the following Supplemental Scripts may need to be updated in the "trunk/supp" directory:

  * create_owner.sql
  * create_user.sql
  * fullasm.sql
  * fullgen.sql

Additionally, the following Supplemental Scripts may need to be updated in the "trunk" directory:

  * install.sql
  * uninstall.sql


== Update Documentation ==

Review and update as needed the "README.txt" documents in the following directories:

  * trunk
  * trunk/src
  * demo
  * demo/asof
  * demo/basics
  * demo/gui
  * demo/tiers

Review and update as needed the documents in "trunk/docs"


== Perform a Test Installation ==


== 