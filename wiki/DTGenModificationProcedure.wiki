#summary Procedure for Modifying Basic DTGen Structure.

= Introduction =

Since DTGen generates DTGen, there is a need for 2 DTGen(s) during development:

  * Old DTGen to generate the new DTGen
  * New DTGen to test prior to overwriting the old DTGen

The following procedure is a way to accomplish that effort.


= Details =

== Complete Changes to Old DTGen ==

Ensure that the changes to Old DTGen are as complete as possible.  Do not make any changes to Old DTGen that will cause it not to work.  The Old DTGen will be copied to a new location.  Any changes to Old DTGen, after the copy is made, will need to be duplicated in the New DTGen


== Test Generate the New DTGen ==

This is the first test of the New DTGen.  It is likely that the "compl.sql" script will produce errors.  This is not a problem, so long as the New DTGen generates successfully from the Old DTGen and loads into the test environment successfully.  The command for performing this first test is run from the "trunk/test" directory:

  * ./t.sh dtgen


== Copy Program/Module Source to New DTGen ==

Copy the following Program/Module Sources from "trunk/src" to "trunk/test/dtgen":

  * comp.sql
  * dtgen_util.pkb
  * dtgen_util.pks
  * generate.pkb
  * generate.pks
  * gui_app_tree_vw.sql
  * gui_util.pkb
  * gui_util.pks

== Complete Changes to New DTGen ==

The above listed Program/Module Sources can be compiled and tested against the New DTGen installation in the test environment.  Additionally, the dtgen_dataload.ctl can be modified and tested.  With this step complete, the New DTGen should be fully available in the database with all source compiled and dtgen_dataload.ctl loaded.

== Update Demo Directory ==

???


== 