
--
--  Install install_db Scripts for UTP
--
--  The 6 scripts included are:
--    -) create_glob
--    -) create_ods
--    -) create_integ
--    -) create_oltp
--    -) create_aa
--    -) create_mods
--


select ' -) create_glob  ' as FILE_NAME from dual;


-- Script File "create_glob"
--    Create Globals using generated code

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:14 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 



CREATE package glob
is

   -- Package Glob
   --    Globally available settings and functions
   --    (Centrally located, but globally visible)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:14 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- Current User for Audit
   procedure set_usr
         (usr_in  in  VARCHAR2);
   function get_usr
      return VARCHAR2;

   -- TRUE - Table Triggers run TABLE_TAB calls
   -- FALSE - View_TABs run TABLE_TAB calls
   procedure set_db_constraints
      (bool_in  in  boolean);
   function get_db_constraints
      return boolean;
   function get_db_constraints_str
      return varchar2;

   -- TRUE - Change string data to required case
   -- FALSE - Check string data for require case
   procedure set_fold_strings
      (bool_in  in  boolean);
   function get_fold_strings
      return boolean;
   function get_fold_strings_str
      return varchar2;

   -- Centralized procedure to set date/time for ASOF views
   procedure set_asof_dtm
         (asof_dtm_in  in  timestamp with time zone);
   function get_asof_dtm
      return timestamp with time zone;

   -- TRUE - gen_no_change error is ignored during UPDATE
   -- FALSE - gen_no_change error is enforced during UPDATE
   procedure set_ignore_no_change
      (bool_in  in  boolean);
   function get_ignore_no_change
      return boolean;
   function get_ignore_no_change_str
      return varchar2;

   -- Centralized procedure for GLOBAL date/time
   function get_dtm
      return timestamp with local time zone;

   -- Centralized procedure to set next ETL start date/time
   procedure upd_early_eff
      (table_name  in  varchar2
      ,eff_dtm_in  in  timestamp);

   -- Centralized procedure GLOBAL locks
   function request_lock
         (lockname_in  in  varchar2
         ,timeout_in   in  INTEGER  default null)
      return varchar2;
   function release_lock
      return varchar2;

   -- Centralized procedure to delete all application data in database
   -- procedure delete_all_data;

end glob;
/
select 'GLOB' as "Package:"
 from  user_errors
 where name  = 'GLOB'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOB'
  and  type = 'PACKAGE'
 order by sequence
/

CREATE package body glob
is

-- Package Body Glob
--    Globally available settings and functions
--    (Centrally located, but globally visible)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:14 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


current_usr           varchar2(30);
db_constraints        boolean := true;
fold_strings          boolean := true;
asof_dtm              timestamp with time zone := 
   to_timestamp_tz('2010-01-01 00:00:00 UTC','YYYY-MM-DD HH24:MI:SS TZR');
ignore_no_change      boolean := true;

st_lockhandle         varchar2(128);  -- Single Threaded DBMS_LOCK
st_lockname           varchar2(128);  -- Single Threaded DBMS_LOCK

----------------------------------------
procedure set_usr
      (usr_in  in  VARCHAR2)
is
begin
   current_usr := substr(usr_in,1,30);
end set_usr;
----------------------------------------
function get_usr
   return VARCHAR2
is
begin
   if current_usr is null
   then
      raise_application_error(-20002, 'Current User has not been set in the Glob Package.');
   end if;
   return current_usr;
end get_usr;
----------------------------------------
procedure set_db_constraints
      (bool_in  in  boolean)
is
begin
   db_constraints := bool_in;
end set_db_constraints;
----------------------------------------
function get_db_constraints
      return boolean
is
begin
   return db_constraints;
end get_db_constraints;
----------------------------------------
function get_db_constraints_str
      return varchar2
is
begin
   if db_constraints
   then return 'TRUE';
   else return 'FALSE';
   end if;
end get_db_constraints_str;
----------------------------------------
procedure set_fold_strings
      (bool_in  in  boolean)
is
begin
   fold_strings := bool_in;
end set_fold_strings;
----------------------------------------
function get_fold_strings
      return boolean
is
begin
   return fold_strings;
end get_fold_strings;
----------------------------------------
function get_fold_strings_str
      return varchar2
is
begin
   if fold_strings
   then return 'TRUE';
   else return 'FALSE';
   end if;
end get_fold_strings_str;
----------------------------------------
procedure set_asof_dtm
      (asof_dtm_in  in  timestamp with time zone)
is
begin
   asof_dtm := asof_dtm_in;
end set_asof_dtm;
----------------------------------------
function get_asof_dtm
   return timestamp with time zone
is
begin
   return asof_dtm;
end get_asof_dtm;
----------------------------------------
procedure set_ignore_no_change
      (bool_in  in  boolean)
is
begin
   ignore_no_change := bool_in;
end set_ignore_no_change;
----------------------------------------
function get_ignore_no_change
      return boolean
is
begin
   return ignore_no_change;
end get_ignore_no_change;
----------------------------------------
function get_ignore_no_change_str
      return varchar2
is
begin
   if ignore_no_change
   then return 'TRUE';
   else return 'FALSE';
   end if;
end get_ignore_no_change_str;
----------------------------------------
function get_dtm
      return timestamp with local time zone
is
begin
   return systimestamp;
end get_dtm;
----------------------------------------
procedure upd_early_eff
   (table_name  in  varchar2
   ,eff_dtm_in  in  timestamp)
   --   Needs a Global Table of some sort to store this.
is
begin
   null;
end upd_early_eff;
----------------------------------------
procedure allocate_lock
is
   PRAGMA AUTONOMOUS_TRANSACTION;
begin
   dbms_lock.allocate_unique(lockname        => st_lockname
                            ,lockhandle      => st_lockhandle
                            ,expiration_secs => 43200);
end allocate_lock;
----------------------------------------
function request_lock
      (lockname_in  in  varchar2
      ,timeout_in   in  INTEGER  default null)
   return varchar2
is
   retcd number;
begin
   if st_lockname is not null
   then
      if st_lockname = lockname_in
      then
         return 'SUCCESS';
      else
         return 'RELEASE ONLY';
      end if;
   end if;
   st_lockname := lockname_in;
   allocate_lock;
   retcd := dbms_lock.request(lockhandle        => st_lockhandle
                             ,lockmode          => DBMS_LOCK.X_MODE
                             ,timeout           => nvl(timeout_in,DBMS_LOCK.MAXWAIT)
                             ,release_on_commit => TRUE);
   case retcd
      when 0 then
         return 'SUCCESS';
      when 4 then
         -- This session already owns the lock
         return 'SUCCESS';
      when 1 then
         st_lockname   := null;
         return 'TIMEOUT';
      when 2 then
         st_lockname   := null;
         return 'DEADLOCK';
      when 3 then
         st_lockname   := null;
         return 'PARAMETER ERROR';
      when 5 then
         st_lockname   := null;
         return 'ILLEGAL LOCKNAME';
   end case;
   return 'END ERROR';
end request_lock;
----------------------------------------
function release_lock
   return varchar2
is
   retcd INTEGER;
begin
   if st_lockname is null
   then
      return 'SUCCESS';
   end if;
   retcd := dbms_lock.release(lockhandle => st_lockhandle);
   case retcd
      when 0 then
         st_lockname := null;
         return 'SUCCESS';
      when 4 then
         -- This session doesn't own the lock
         st_lockname := null;
         return 'SUCCESS';
      when 3 then
         return 'PARAMETER ERROR';
      when 5 then
         return 'ILLEGAL LOCKNAME';
   end case;
   return 'END ERROR';
end release_lock;
----------------------------------------
--  NOT GLOBAL: This Procedure is Application Specific
--procedure delete_all_data
   --  delete all rows in all tables
   --  EXECUTE IMMEDIATE is used because these tables
   --      don't exist at UTIL PACKAGE compile time
--is
--begin
--   EXECUTE IMMEDIATE 'delete from test_sets';
--   EXECUTE IMMEDIATE 'delete from test_parms';
--   EXECUTE IMMEDIATE 'delete from parm_sets';
--   EXECUTE IMMEDIATE 'delete from global_parms';
--   EXECUTE IMMEDIATE 'delete from util_log';
--end delete_all_data;
----------------------------------------
begin
   st_lockname := null;
end glob;
/
select 'GLOB' as "Package Body:"
 from  user_errors
 where name  = 'GLOB'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOB'
  and  type = 'PACKAGE BODY'
 order by sequence
/

-- Setup Varray Structures for Name/Value Pair Storage
create type pair_type as object
   (name  varchar2(30)
   ,data  varchar2(32767)
   )
/
select 'PAIR_TYPE' as "Type:"
 from  user_errors
 where name  = 'PAIR_TYPE'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PAIR_TYPE'
  and  type = 'TYPE'
 order by sequence
/

create type col_type as varray(100) of pair_type
/
select 'COL_TYPE' as "Type:"
 from  user_errors
 where name  = 'COL_TYPE'
  and  type  = 'TYPE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'COL_TYPE'
  and  type = 'TYPE'
 order by sequence
/


-- Table of debug and error messages.
create table util_log
   (dtm              timestamp with local time zone
   ,usr              varchar2(30)
   ,txt              varchar2(4000)
   ,loc              varchar2(2000))
/

create index util_log_ix1 on util_log (dtm, usr)
/

comment on table util_log is 'Error and Debug Messages'
/

comment on column util_log.dtm is 'System time when message was logged'
/
comment on column util_log.usr is 'Username from glob.get_usr function'
/
comment on column util_log.txt is 'Error or Debug message text'
/
comment on column util_log.loc is 'Location in the source code where the message as logged'
/

CREATE package util
is

   -- Package Util
   --    Utility settings and functions
   --    (A copy is located locally on a each node)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:14 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- Separates values within a set of Natural Keys
   nk_sep  constant varchar2(1) := ',';
   -- Separates values in a path hierarchy
   path_sep  constant varchar2(1) := ':';

   first_dtm  constant timestamp with time zone :=
        to_timestamp_tz('1970-01-01 00:00:00 UTC','YYYY-MM-DD HH24:MI:SS TZR');
   last_dtm   constant timestamp with time zone :=
        to_timestamp_tz('4713-12-31 23:59:59 UTC','YYYY-MM-DD HH24:MI:SS TZR');

   function get_version
      return varchar2;

   function get_first_dtm
      return timestamp with time zone;
   function get_last_dtm
      return timestamp with time zone;

   function is_equal
         (t1_in  in  varchar2
         ,t2_in  in  varchar2
         )
      return boolean;
   function is_equal
         (n1_in  in  number
         ,n2_in  in  number
         )
      return boolean;

   procedure init_longops
         (opname_in       in  varchar2
         ,totalwork_in    in  number
         ,target_desc_in  in  varchar2
         ,units_in        in  varchar2);
   procedure add_longops
         (add_sofar_in  in  number);
   procedure end_longops;

   procedure log
         (txt_in  in  varchar2
         ,loc_in  in  varchar2 default null
         );
   procedure err
         (txt_in  in  varchar2
         );

   function db_object_exists
         (name_in  in  varchar2
         ,type_in  in  varchar2
         )
     return boolean;

   function col_to_clob
         (col_in  in  col_type
         )
     return clob;
   function col_data
         (col_in   in  col_type
         ,name_in  in  varchar2
         )
     return varchar2;

end util;
/
select 'UTIL' as "Package:"
 from  user_errors
 where name  = 'UTIL'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'UTIL'
  and  type = 'PACKAGE'
 order by sequence
/

CREATE package body util
is

-- Package Body Util
--    Utility settings and functions
--    (A copy is located locally on a each node)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:14 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


lo_context      BINARY_INTEGER;  -- DBMS_APPLICATION.set_session_longops
lo_op_name      varchar2(64);    -- DBMS_APPLICATION.set_session_longops
lo_rindex       BINARY_INTEGER;  -- DBMS_APPLICATION.set_session_longops
lo_slno         BINARY_INTEGER;  -- DBMS_APPLICATION.set_session_longops
lo_sofar        number;          -- DBMS_APPLICATION.set_session_longops
lo_totalwork    number;          -- DBMS_APPLICATION.set_session_longops
lo_target       BINARY_INTEGER;  -- DBMS_APPLICATION.set_session_longops
lo_target_desc  varchar2(32);    -- DBMS_APPLICATION.set_session_longops
lo_units        varchar2(32);    -- DBMS_APPLICATION.set_session_longops

----------------------------------------
function get_version
   return varchar2
is
begin
   return 'DTGen_0.11';
end get_version;
----------------------------------------
function get_first_dtm
   return timestamp with time zone
is
begin
   return first_dtm;
end get_first_dtm;
----------------------------------------
function get_last_dtm
      return timestamp with time zone
is
begin
   return last_dtm;
end get_last_dtm;
----------------------------------------
function is_equal
      (t1_in  in  varchar2
      ,t2_in  in  varchar2
      )
   return boolean
is
begin
   if t1_in = t2_in or (t1_in is null and t2_in is null)
   then
      return TRUE;
   else
      return FALSE;
   end if;
end is_equal;
----------------------------------------
function is_equal
      (n1_in  in  number
      ,n2_in  in  number
      )
   return boolean
is
begin
   if n1_in = n2_in or (n1_in is null and n2_in is null)
   then
      return TRUE;
   else
      return FALSE;
   end if;
end is_equal;
----------------------------------------
procedure init_longops
      (opname_in       in  varchar2
      ,totalwork_in    in  number
      ,target_desc_in  in  varchar2
      ,units_in        in  varchar2)
is
begin
   if lo_rindex = dbms_application_info.set_session_longops_nohint
   then
      lo_slno        := null;
      lo_op_name     := opname_in;
      lo_target      := 0;
      lo_context     := 0;
      lo_sofar       := 0;
      lo_totalwork   := totalwork_in;
      lo_target_desc := target_desc_in;
      lo_units       := units_in;
      dbms_application_info.set_session_longops
         (lo_rindex, lo_slno, lo_op_name, lo_target, lo_context,
          lo_sofar, lo_totalwork, lo_target_desc, lo_units);
   end if;
end init_longops;
----------------------------------------
procedure add_longops
      (add_sofar_in  in  number)
is
begin
   if lo_rindex <> dbms_application_info.set_session_longops_nohint
   then
      lo_sofar := lo_sofar + add_sofar_in;
      dbms_application_info.set_session_longops
         (lo_rindex, lo_slno, lo_op_name, lo_target, lo_context,
          lo_sofar, lo_totalwork, lo_target_desc, lo_units);
   end if;
end add_longops;
----------------------------------------
procedure end_longops
is
begin
   if lo_rindex <> dbms_application_info.set_session_longops_nohint
   then
      lo_sofar := lo_totalwork;
      dbms_application_info.set_session_longops
         (lo_rindex, lo_slno, lo_op_name, lo_target, lo_context,
          lo_sofar, lo_totalwork, lo_target_desc, lo_units);
      lo_rindex := dbms_application_info.set_session_longops_nohint;
   end if;
end end_longops;
----------------------------------------
procedure log
      (txt_in  in  varchar2
      ,loc_in  in  varchar2 default null
      )
is
/*  Sample output from DBMS_UTILITY.FORMAT_CALL_STACK:
----- PL/SQL Call Stack -----
  object      line  object
  handle    number  name
A4A6A840        76  package body GEN2.UTIL
AA345744         6  anonymous block
AA345744        16  anonymous block
*/
   PRAGMA AUTONOMOUS_TRANSACTION;
   usr_buff  varchar2(30);
   fcs_txt  varchar2(2000);
begin
   -- pragma restrict_references(format_call_stack,WNDS);
   -- WNDS Asserts that the subprogram writes no database state
   --      (does not modify database tables).
   -- DBMS_UTILITY.FORMAT_CALL_STACK returns up to 2000 characters
   fcs_txt := DBMS_UTILITY.FORMAT_CALL_STACK;
   begin
      usr_buff := glob.get_usr;
   exception when others then
      usr_buff := null;
   end;
   insert into util_log
         (dtm
         ,usr
         ,txt
         ,loc
         )
      values
         (systimestamp
         ,usr_buff
         ,substr(txt_in,1,4000)
         ,nvl(substr(loc_in,1,4000), fcs_txt)
         );
   dbms_output.put_line(txt_in || fcs_txt);
   commit;
end log;
----------------------------------------
procedure err
      (txt_in  in  varchar2
      )
is
   fcs_txt  varchar2(2000) := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
   retstr   varchar2(100);
begin
   log (txt_in, fcs_txt);
   end_longops;
   retstr := glob.release_lock;
end err;
----------------------------------------
function db_object_exists
      (name_in  in  varchar2
      ,type_in  in  varchar2
      )
   return boolean
is
   cursor c1 is
      select * from all_objects
       where object_type = type_in
        and  object_name = name_in;
   buf1 c1%ROWTYPE;
   retb boolean;
begin
   open c1;
   fetch c1 into buf1;
   retb := c1%FOUND;
   close c1;
   return retb;
end db_object_exists;
----------------------------------------
function col_to_clob
      (col_in  in  col_type
      )
   return clob
is
   rclob  clob;
   rlen   number;
begin
   rclob := '';
   for i in 1 .. col_in.COUNT
   loop
      rclob := rclob ||
               col_in(i).name || ':' ||
               col_in(i).data || CHR(10);
   end loop;
   rlen := length(rclob);
   if rlen > 32768
   then
      rlen := 32768;
   end if;
   return substr(rclob,1,rlen-1);
exception
  when SUBSCRIPT_BEYOND_COUNT
  then
     return null;
  when COLLECTION_IS_NULL
  then
     return null;
  when others
  then
     raise;
end col_to_clob;
----------------------------------------
function col_data
         (col_in   in  col_type
         ,name_in  in  varchar2
         )
     return varchar2
is
   --
   -- col_data was used for the POP_AUDIT log table
   --
begin
   for i in 1 .. col_in.COUNT
   loop
      if lower(name_in) = lower(col_in(i).name)
      then
         return col_in(i).data;
      end if;
   end loop;
   return null;
exception
  when SUBSCRIPT_BEYOND_COUNT
  then
     return null;
  when COLLECTION_IS_NULL
  then
     return null;
  when others
  then
     raise;
end col_data;
----------------------------------------
begin
   lo_rindex := dbms_application_info.set_session_longops_nohint;
end util;
/
select 'UTIL' as "Package Body:"
 from  user_errors
 where name  = 'UTIL'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'UTIL'
  and  type = 'PACKAGE BODY'
 order by sequence
/



select ' -) create_ods  ' as FILE_NAME from dual;


-- Script File "create_ods"
--    Create Online Data Store using generated code

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 



select '***  global_parms  ***' as TABLE_NAME from dual
/

create package global_parms_tab
is

   -- Package Global_Parms_Tab
   --    Table functions
   --    (DML and integrity checks)
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,n_global_set  in out  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end global_parms_tab;
/
select 'GLOBAL_PARMS_TAB' as "Package:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_TAB'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_TAB'
  and  type = 'PACKAGE'
 order by sequence
/

create sequence global_parms_seq
/

create table global_parms
   (id   NUMBER(38)
   ,global_set   VARCHAR2(1)
         constraint global_parms_nn1 not null
   ,db_constraints   VARCHAR2(1)
         constraint global_parms_nn2 not null
   ,fold_strings   VARCHAR2(1)
         constraint global_parms_nn3 not null
   ,ignore_no_change   VARCHAR2(1)
         constraint global_parms_nn4 not null
   ,description   VARCHAR2(2000)
   ) pctfree 10
/

comment on table global_parms is 'Global Parameters that affect generated systems "across the board".'
/

comment on column global_parms.id is 'Surrogate Primary Key for these global_parms'
/
comment on column global_parms.global_set is 'Global Set Name/Code'
/
comment on column global_parms.db_constraints is 'Database Constraints setting for  the DTGen GLOB Package.'
/
comment on column global_parms.fold_strings is 'Fold Strings setting for  the DTGen GLOB Package.'
/
comment on column global_parms.ignore_no_change is 'Ignore No Change setting for  the DTGen GLOB Package.'
/
comment on column global_parms.description is 'Description of this Global Set'
/

alter table global_parms add constraint global_parms_pk
   primary key (id)
/

/***  ACTIVE Foreign Keys  ***/

/***  ACTIVE Indexes  ***/
alter table global_parms add constraint global_parms_nk
    unique (global_set
           )
/
alter table global_parms add constraint global_parms_ux1
    unique (db_constraints
           ,fold_strings
           ,ignore_no_change
           )
/


/***  ACTIVE Audit Foreign Key Indexes  ***/
-- create index global_parms_ia1 on global_parms(aud_beg_usr)
-- /
-- create index global_parms_ia2 on global_parms(aud_beg_dtm)
-- /

create package body global_parms_tab
is

-- Package Body Global_Parms_Tab
--    Table functions
--    (DML and integrity checks)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,global_set  in out  VARCHAR2
      ,db_constraints  in out  VARCHAR2
      ,fold_strings  in out  VARCHAR2
      ,ignore_no_change  in out  VARCHAR2
      ,description  in out  VARCHAR2
      )
is
begin
   -- Fold the case, as needed
   if glob.get_fold_strings
   then
      db_constraints := upper(db_constraints);
      fold_strings := upper(fold_strings);
      ignore_no_change := upper(ignore_no_change);
   else
      if db_constraints != upper(db_constraints)
      then
         raise_application_error(-20003, 'global_parms_tab.check_rec(): db_constraints must be upper case.');
      end if;
      if fold_strings != upper(fold_strings)
      then
         raise_application_error(-20003, 'global_parms_tab.check_rec(): fold_strings must be upper case.');
      end if;
      if ignore_no_change != upper(ignore_no_change)
      then
         raise_application_error(-20003, 'global_parms_tab.check_rec(): ignore_no_change must be upper case.');
      end if;
   end if;
   --  Check for NOT NULL
   if global_set is null
   then
      raise_application_error(-20004, 'global_parms_tab.check_rec(): global_set cannot be null.');
   end if;
   if db_constraints is null
   then
      raise_application_error(-20004, 'global_parms_tab.check_rec(): db_constraints cannot be null.');
   end if;
   if fold_strings is null
   then
      raise_application_error(-20004, 'global_parms_tab.check_rec(): fold_strings cannot be null.');
   end if;
   if ignore_no_change is null
   then
      raise_application_error(-20004, 'global_parms_tab.check_rec(): ignore_no_change cannot be null.');
   end if;
   -- Check for Domain Values
   if db_constraints not in ('T', 'F')
   then
      raise_application_error(-20005, 'global_parms_tab.check_rec(): db_constraints must be one of ("T", "F").');
   end if;
   if fold_strings not in ('T', 'F')
   then
      raise_application_error(-20005, 'global_parms_tab.check_rec(): fold_strings must be one of ("T", "F").');
   end if;
   if ignore_no_change not in ('T', 'F')
   then
      raise_application_error(-20005, 'global_parms_tab.check_rec(): ignore_no_change must be one of ("T", "F").');
   end if;
   -- Custom Constraint Checks
   --  Set eff_beg_dtm, if needed
end check_rec;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
   sql_txt  varchar2(200);
begin
   -- Set n_id, if needed
   if n_id is null
   then
      select global_parms_seq.nextval
       into  n_id from dual;
   end if;
   check_rec (n_id
             ,n_global_set
             ,n_db_constraints
             ,n_fold_strings
             ,n_ignore_no_change
             ,n_description
             );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_global_set  in      VARCHAR2
      ,n_global_set  in out  VARCHAR2
      ,o_db_constraints  in      VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,o_fold_strings  in      VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,o_ignore_no_change  in      VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,o_description  in      VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
begin
   if     o_global_set = n_global_set
      and o_db_constraints = n_db_constraints
      and o_fold_strings = n_fold_strings
      and o_ignore_no_change = n_ignore_no_change
      and util.is_equal(o_description, n_description)
   then
      if glob.get_ignore_no_change
      then
         return;
      end if;
      raise_application_error(-20008, 'global_parms_tab.upd(): Must update one of'
            || ' global_set'
            || ', db_constraints'
            || ', fold_strings'
            || ', ignore_no_change'
            || ', description'
            || '.');
   end if;
   check_rec (o_id
             ,n_global_set
             ,n_db_constraints
             ,n_fold_strings
             ,n_ignore_no_change
             ,n_description
             );
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   return;
end del;
----------------------------------------
end global_parms_tab;
/
select 'GLOBAL_PARMS_TAB' as "Package Body:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_TAB'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_TAB'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  parm_sets  ***' as TABLE_NAME from dual
/

create package parm_sets_tab
is

   -- Package Parm_Sets_Tab
   --    Table functions
   --    (DML and integrity checks)
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,n_parm_set  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end parm_sets_tab;
/
select 'PARM_SETS_TAB' as "Package:"
 from  user_errors
 where name  = 'PARM_SETS_TAB'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_TAB'
  and  type = 'PACKAGE'
 order by sequence
/

create sequence parm_sets_seq
/

create table parm_sets
   (id   NUMBER(38)
   ,parm_set   VARCHAR2(30)
         constraint parm_sets_nn1 not null
   ,description   VARCHAR2(2000)
   ) pctfree 10
/

comment on table parm_sets is 'Parameter Sets are groups of test results and parameters used be each unit test.'
/

comment on column parm_sets.id is 'Surrogate Primary Key for these parm_sets'
/
comment on column parm_sets.parm_set is 'Parameter Set Name'
/
comment on column parm_sets.description is 'Description for this Parameter Set'
/

alter table parm_sets add constraint parm_sets_pk
   primary key (id)
/

/***  ACTIVE Foreign Keys  ***/

/***  ACTIVE Indexes  ***/
alter table parm_sets add constraint parm_sets_nk
    unique (parm_set
           )
/


/***  ACTIVE Audit Foreign Key Indexes  ***/
-- create index parm_sets_ia1 on parm_sets(aud_beg_usr)
-- /
-- create index parm_sets_ia2 on parm_sets(aud_beg_dtm)
-- /

create package body parm_sets_tab
is

-- Package Body Parm_Sets_Tab
--    Table functions
--    (DML and integrity checks)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,parm_set  in out  VARCHAR2
      ,description  in out  VARCHAR2
      )
is
begin
   -- Fold the case, as needed
   --  Check for NOT NULL
   if parm_set is null
   then
      raise_application_error(-20004, 'parm_sets_tab.check_rec(): parm_set cannot be null.');
   end if;
   -- Check for Domain Values
   -- Custom Constraint Checks
   --  Set eff_beg_dtm, if needed
end check_rec;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
   sql_txt  varchar2(200);
begin
   -- Set n_id, if needed
   if n_id is null
   then
      select parm_sets_seq.nextval
       into  n_id from dual;
   end if;
   check_rec (n_id
             ,n_parm_set
             ,n_description
             );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in      VARCHAR2
      ,n_parm_set  in out  VARCHAR2
      ,o_description  in      VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
begin
   if     o_parm_set = n_parm_set
      and util.is_equal(o_description, n_description)
   then
      if glob.get_ignore_no_change
      then
         return;
      end if;
      raise_application_error(-20008, 'parm_sets_tab.upd(): Must update one of'
            || ' parm_set'
            || ', description'
            || '.');
   end if;
   check_rec (o_id
             ,n_parm_set
             ,n_description
             );
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   return;
end del;
----------------------------------------
end parm_sets_tab;
/
select 'PARM_SETS_TAB' as "Package Body:"
 from  user_errors
 where name  = 'PARM_SETS_TAB'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_TAB'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  test_parms  ***' as TABLE_NAME from dual
/

create package test_parms_tab
is

   -- Package Test_Parms_Tab
   --    Table functions
   --    (DML and integrity checks)
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,n_parm_set  in out  NUMBER
      ,o_parm_seq  in  NUMBER
      ,n_parm_seq  in out  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,n_result_txt  in out  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_seq  in  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end test_parms_tab;
/
select 'TEST_PARMS_TAB' as "Package:"
 from  user_errors
 where name  = 'TEST_PARMS_TAB'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_TAB'
  and  type = 'PACKAGE'
 order by sequence
/

create sequence test_parms_seq
/

create table test_parms
   (id   NUMBER(38)
   ,parm_set   NUMBER(38)
         constraint test_parms_nn1 not null
   ,parm_seq   NUMBER
         constraint test_parms_nn2 not null
   ,result_txt   VARCHAR2(4000)
   ,val0   VARCHAR2(4000)
   ,val1   VARCHAR2(4000)
   ,val2   VARCHAR2(4000)
   ,val3   VARCHAR2(4000)
   ,val4   VARCHAR2(4000)
   ,val5   VARCHAR2(4000)
   ,val6   VARCHAR2(4000)
   ,val7   VARCHAR2(4000)
   ,val8   VARCHAR2(4000)
   ,val9   VARCHAR2(4000)
   ,description   VARCHAR2(2000)
   ) pctfree 10
/

comment on table test_parms is 'Actual test parameter values, sequenced for each parameter set.'
/

comment on column test_parms.id is 'Surrogate Primary Key for these test_parms'
/
comment on column test_parms.parm_set is 'Parameter Set Name'
/
comment on column test_parms.parm_seq is 'Parameter Set Sequence Number'
/
comment on column test_parms.result_txt is 'Expected Result String '
/
comment on column test_parms.val0 is 'Value 0 of the Parameter Set'
/
comment on column test_parms.val1 is 'Value 1 of the Parameter Set'
/
comment on column test_parms.val2 is 'Value 2 of the Parameter Set'
/
comment on column test_parms.val3 is 'Value 3 of the Parameter Set'
/
comment on column test_parms.val4 is 'Value 4 of the Parameter Set'
/
comment on column test_parms.val5 is 'Value 5 of the Parameter Set'
/
comment on column test_parms.val6 is 'Value 6 of the Parameter Set'
/
comment on column test_parms.val7 is 'Value 7 of the Parameter Set'
/
comment on column test_parms.val8 is 'Value 8 of the Parameter Set'
/
comment on column test_parms.val9 is 'Value 9 of the Parameter Set'
/
comment on column test_parms.description is 'Description for this Parameter Set Sequence'
/

alter table test_parms add constraint test_parms_pk
   primary key (id)
/

/***  ACTIVE Foreign Keys  ***/
alter table test_parms add constraint test_parms_fk1
   foreign key (parm_set) references parm_sets (id)
/

/***  ACTIVE Indexes  ***/
alter table test_parms add constraint test_parms_nk
    unique (parm_set
           ,parm_seq
           )
/
create index test_parms_fx1 on test_parms(parm_set)
/


/***  ACTIVE Audit Foreign Key Indexes  ***/
-- create index test_parms_ia1 on test_parms(aud_beg_usr)
-- /
-- create index test_parms_ia2 on test_parms(aud_beg_dtm)
-- /

create package body test_parms_tab
is

-- Package Body Test_Parms_Tab
--    Table functions
--    (DML and integrity checks)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,parm_set  in out  NUMBER
      ,parm_seq  in out  NUMBER
      ,result_txt  in out  VARCHAR2
      ,val0  in out  VARCHAR2
      ,val1  in out  VARCHAR2
      ,val2  in out  VARCHAR2
      ,val3  in out  VARCHAR2
      ,val4  in out  VARCHAR2
      ,val5  in out  VARCHAR2
      ,val6  in out  VARCHAR2
      ,val7  in out  VARCHAR2
      ,val8  in out  VARCHAR2
      ,val9  in out  VARCHAR2
      ,description  in out  VARCHAR2
      )
is
begin
   -- Fold the case, as needed
   --  Check for NOT NULL
   if parm_set is null
   then
      raise_application_error(-20004, 'test_parms_tab.check_rec(): parm_set cannot be null.');
   end if;
   if parm_seq is null
   then
      raise_application_error(-20004, 'test_parms_tab.check_rec(): parm_seq cannot be null.');
   end if;
   -- Check for Domain Values
   -- Custom Constraint Checks
   --  Set eff_beg_dtm, if needed
end check_rec;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
   sql_txt  varchar2(200);
begin
   -- Set n_id, if needed
   if n_id is null
   then
      select test_parms_seq.nextval
       into  n_id from dual;
   end if;
   check_rec (n_id
             ,n_parm_set
             ,n_parm_seq
             ,n_result_txt
             ,n_val0
             ,n_val1
             ,n_val2
             ,n_val3
             ,n_val4
             ,n_val5
             ,n_val6
             ,n_val7
             ,n_val8
             ,n_val9
             ,n_description
             );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in      NUMBER
      ,n_parm_set  in out  NUMBER
      ,o_parm_seq  in      NUMBER
      ,n_parm_seq  in out  NUMBER
      ,o_result_txt  in      VARCHAR2
      ,n_result_txt  in out  VARCHAR2
      ,o_val0  in      VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,o_val1  in      VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,o_val2  in      VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,o_val3  in      VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,o_val4  in      VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,o_val5  in      VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,o_val6  in      VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,o_val7  in      VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,o_val8  in      VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,o_val9  in      VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,o_description  in      VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
begin
   if     o_parm_set = n_parm_set
      and o_parm_seq = n_parm_seq
      and util.is_equal(o_result_txt, n_result_txt)
      and util.is_equal(o_val0, n_val0)
      and util.is_equal(o_val1, n_val1)
      and util.is_equal(o_val2, n_val2)
      and util.is_equal(o_val3, n_val3)
      and util.is_equal(o_val4, n_val4)
      and util.is_equal(o_val5, n_val5)
      and util.is_equal(o_val6, n_val6)
      and util.is_equal(o_val7, n_val7)
      and util.is_equal(o_val8, n_val8)
      and util.is_equal(o_val9, n_val9)
      and util.is_equal(o_description, n_description)
   then
      if glob.get_ignore_no_change
      then
         return;
      end if;
      raise_application_error(-20008, 'test_parms_tab.upd(): Must update one of'
            || ' parm_set'
            || ', parm_seq'
            || ', result_txt'
            || ', val0'
            || ', val1'
            || ', val2'
            || ', val3'
            || ', val4'
            || ', val5'
            || ', val6'
            || ', val7'
            || ', val8'
            || ', val9'
            || ', description'
            || '.');
   end if;
   check_rec (o_id
             ,n_parm_set
             ,n_parm_seq
             ,n_result_txt
             ,n_val0
             ,n_val1
             ,n_val2
             ,n_val3
             ,n_val4
             ,n_val5
             ,n_val6
             ,n_val7
             ,n_val8
             ,n_val9
             ,n_description
             );
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_seq  in  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   return;
end del;
----------------------------------------
end test_parms_tab;
/
select 'TEST_PARMS_TAB' as "Package Body:"
 from  user_errors
 where name  = 'TEST_PARMS_TAB'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_TAB'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  test_sets  ***' as TABLE_NAME from dual
/

create package test_sets_tab
is

   -- Package Test_Sets_Tab
   --    Table functions
   --    (DML and integrity checks)
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,n_user_name  in out  VARCHAR2
      ,o_global_set  in  NUMBER
      ,n_global_set  in out  NUMBER
      ,o_test_name  in  VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,n_parm_set  in out  NUMBER
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_test_name  in  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_description  in  VARCHAR2
      );
end test_sets_tab;
/
select 'TEST_SETS_TAB' as "Package:"
 from  user_errors
 where name  = 'TEST_SETS_TAB'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_TAB'
  and  type = 'PACKAGE'
 order by sequence
/

create sequence test_sets_seq
/

create table test_sets
   (id   NUMBER(38)
   ,user_name   VARCHAR2(30)
         constraint test_sets_nn1 not null
   ,global_set   NUMBER(38)
         constraint test_sets_nn2 not null
   ,test_name   VARCHAR2(60)
         constraint test_sets_nn3 not null
   ,parm_set   NUMBER(38)
         constraint test_sets_nn4 not null
   ,description   VARCHAR2(2000)
   ) pctfree 10
/

comment on table test_sets is 'Individual tests and their associated parameter sets.'
/

comment on column test_sets.id is 'Surrogate Primary Key for these test_sets'
/
comment on column test_sets.user_name is 'User name running this unit test.'
/
comment on column test_sets.global_set is 'Global set used for this unit test.'
/
comment on column test_sets.test_name is 'Test name used for this unit test.'
/
comment on column test_sets.parm_set is 'Sequence of Parameter Values and Result for this unit test.'
/
comment on column test_sets.description is 'Description of this unit test.'
/

alter table test_sets add constraint test_sets_pk
   primary key (id)
/

/***  ACTIVE Foreign Keys  ***/
alter table test_sets add constraint test_sets_fk1
   foreign key (global_set) references global_parms (id)
/
alter table test_sets add constraint test_sets_fk2
   foreign key (parm_set) references parm_sets (id)
/

/***  ACTIVE Indexes  ***/
alter table test_sets add constraint test_sets_nk
    unique (user_name
           ,global_set
           ,test_name
           ,parm_set
           )
/
create index test_sets_fx1 on test_sets(global_set)
/
create index test_sets_fx2 on test_sets(parm_set)
/


/***  ACTIVE Audit Foreign Key Indexes  ***/
-- create index test_sets_ia1 on test_sets(aud_beg_usr)
-- /
-- create index test_sets_ia2 on test_sets(aud_beg_dtm)
-- /

create package body test_sets_tab
is

-- Package Body Test_Sets_Tab
--    Table functions
--    (DML and integrity checks)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:16 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure check_rec
      (id  in  NUMBER
      ,user_name  in out  VARCHAR2
      ,global_set  in out  NUMBER
      ,test_name  in out  VARCHAR2
      ,parm_set  in out  NUMBER
      ,description  in out  VARCHAR2
      )
is
begin
   -- Fold the case, as needed
   --  Check for NOT NULL
   if user_name is null
   then
      raise_application_error(-20004, 'test_sets_tab.check_rec(): user_name cannot be null.');
   end if;
   if global_set is null
   then
      raise_application_error(-20004, 'test_sets_tab.check_rec(): global_set cannot be null.');
   end if;
   if test_name is null
   then
      raise_application_error(-20004, 'test_sets_tab.check_rec(): test_name cannot be null.');
   end if;
   if parm_set is null
   then
      raise_application_error(-20004, 'test_sets_tab.check_rec(): parm_set cannot be null.');
   end if;
   -- Check for Domain Values
   -- Custom Constraint Checks
   --  Set eff_beg_dtm, if needed
end check_rec;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_description  in out  VARCHAR2
      )
is
   sql_txt  varchar2(200);
begin
   -- Set n_id, if needed
   if n_id is null
   then
      select test_sets_seq.nextval
       into  n_id from dual;
   end if;
   check_rec (n_id
             ,n_user_name
             ,n_global_set
             ,n_test_name
             ,n_parm_set
             ,n_description
             );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_user_name  in      VARCHAR2
      ,n_user_name  in out  VARCHAR2
      ,o_global_set  in      NUMBER
      ,n_global_set  in out  NUMBER
      ,o_test_name  in      VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,o_parm_set  in      NUMBER
      ,n_parm_set  in out  NUMBER
      ,o_description  in      VARCHAR2
      ,n_description  in out  VARCHAR2
      )
is
begin
   if     o_user_name = n_user_name
      and o_global_set = n_global_set
      and o_test_name = n_test_name
      and o_parm_set = n_parm_set
      and util.is_equal(o_description, n_description)
   then
      if glob.get_ignore_no_change
      then
         return;
      end if;
      raise_application_error(-20008, 'test_sets_tab.upd(): Must update one of'
            || ' user_name'
            || ', global_set'
            || ', test_name'
            || ', parm_set'
            || ', description'
            || '.');
   end if;
   check_rec (o_id
             ,n_user_name
             ,n_global_set
             ,n_test_name
             ,n_parm_set
             ,n_description
             );
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_test_name  in  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_description  in  VARCHAR2
      )
is
begin
   return;
end del;
----------------------------------------
end test_sets_tab;
/
select 'TEST_SETS_TAB' as "Package Body:"
 from  user_errors
 where name  = 'TEST_SETS_TAB'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_TAB'
  and  type = 'PACKAGE BODY'
 order by sequence
/



select ' -) create_integ  ' as FILE_NAME from dual;


-- Script File "create_integ"
--    Create ODS integrity using generated code

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 



select '***  global_parms  ***' as TABLE_NAME from dual
/

alter table global_parms add constraint global_parms_dm1
   check (db_constraints in ('T', 'F'))
/
alter table global_parms add constraint global_parms_dm2
   check (fold_strings in ('T', 'F'))
/
alter table global_parms add constraint global_parms_dm3
   check (ignore_no_change in ('T', 'F'))
/

CREATE TRIGGER global_parms_bi
   BEFORE INSERT
   ON global_parms FOR EACH ROW
begin

   -- Trigger Global_Parms_Bi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger global_parms_bi');
   if glob.get_db_constraints
   then
      global_parms_tab.ins
         (:new.id
         ,:new.global_set
         ,:new.db_constraints
         ,:new.fold_strings
         ,:new.ignore_no_change
         ,:new.description
         );
   end if;
end global_parms_bi;
/
select 'GLOBAL_PARMS_BI' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_BI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_BI'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER global_parms_bu
   BEFORE UPDATE
   ON global_parms FOR EACH ROW
begin

   -- Trigger Global_Parms_Bu

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger global_parms_bu');
   if glob.get_db_constraints
   then
      global_parms_tab.upd
         (:old.id
         ,:old.global_set
         ,:new.global_set
         ,:old.db_constraints
         ,:new.db_constraints
         ,:old.fold_strings
         ,:new.fold_strings
         ,:old.ignore_no_change
         ,:new.ignore_no_change
         ,:old.description
         ,:new.description
         );
   end if;
end global_parms_bu;
/
select 'GLOBAL_PARMS_BU' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_BU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_BU'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER global_parms_bd
   BEFORE DELETE
   ON global_parms FOR EACH ROW
begin

   -- Trigger Global_Parms_Bd

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger global_parms_bd');
   if glob.get_db_constraints
   then
      global_parms_tab.del
         (:old.id
         ,:old.global_set
         ,:old.db_constraints
         ,:old.fold_strings
         ,:old.ignore_no_change
         ,:old.description
         );
   end if;
end global_parms_bd;
/
select 'GLOBAL_PARMS_BD' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_BD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_BD'
  and  type = 'TRIGGER'
 order by sequence
/

select '***  parm_sets  ***' as TABLE_NAME from dual
/


CREATE TRIGGER parm_sets_bi
   BEFORE INSERT
   ON parm_sets FOR EACH ROW
begin

   -- Trigger Parm_Sets_Bi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger parm_sets_bi');
   if glob.get_db_constraints
   then
      parm_sets_tab.ins
         (:new.id
         ,:new.parm_set
         ,:new.description
         );
   end if;
end parm_sets_bi;
/
select 'PARM_SETS_BI' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_BI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_BI'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER parm_sets_bu
   BEFORE UPDATE
   ON parm_sets FOR EACH ROW
begin

   -- Trigger Parm_Sets_Bu

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger parm_sets_bu');
   if glob.get_db_constraints
   then
      parm_sets_tab.upd
         (:old.id
         ,:old.parm_set
         ,:new.parm_set
         ,:old.description
         ,:new.description
         );
   end if;
end parm_sets_bu;
/
select 'PARM_SETS_BU' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_BU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_BU'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER parm_sets_bd
   BEFORE DELETE
   ON parm_sets FOR EACH ROW
begin

   -- Trigger Parm_Sets_Bd

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger parm_sets_bd');
   if glob.get_db_constraints
   then
      parm_sets_tab.del
         (:old.id
         ,:old.parm_set
         ,:old.description
         );
   end if;
end parm_sets_bd;
/
select 'PARM_SETS_BD' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_BD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_BD'
  and  type = 'TRIGGER'
 order by sequence
/

select '***  test_parms  ***' as TABLE_NAME from dual
/


CREATE TRIGGER test_parms_bi
   BEFORE INSERT
   ON test_parms FOR EACH ROW
begin

   -- Trigger Test_Parms_Bi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_parms_bi');
   if glob.get_db_constraints
   then
      test_parms_tab.ins
         (:new.id
         ,:new.parm_set
         ,:new.parm_seq
         ,:new.result_txt
         ,:new.val0
         ,:new.val1
         ,:new.val2
         ,:new.val3
         ,:new.val4
         ,:new.val5
         ,:new.val6
         ,:new.val7
         ,:new.val8
         ,:new.val9
         ,:new.description
         );
   end if;
end test_parms_bi;
/
select 'TEST_PARMS_BI' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_BI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_BI'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER test_parms_bu
   BEFORE UPDATE
   ON test_parms FOR EACH ROW
begin

   -- Trigger Test_Parms_Bu

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_parms_bu');
   if glob.get_db_constraints
   then
      test_parms_tab.upd
         (:old.id
         ,:old.parm_set
         ,:new.parm_set
         ,:old.parm_seq
         ,:new.parm_seq
         ,:old.result_txt
         ,:new.result_txt
         ,:old.val0
         ,:new.val0
         ,:old.val1
         ,:new.val1
         ,:old.val2
         ,:new.val2
         ,:old.val3
         ,:new.val3
         ,:old.val4
         ,:new.val4
         ,:old.val5
         ,:new.val5
         ,:old.val6
         ,:new.val6
         ,:old.val7
         ,:new.val7
         ,:old.val8
         ,:new.val8
         ,:old.val9
         ,:new.val9
         ,:old.description
         ,:new.description
         );
   end if;
end test_parms_bu;
/
select 'TEST_PARMS_BU' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_BU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_BU'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER test_parms_bd
   BEFORE DELETE
   ON test_parms FOR EACH ROW
begin

   -- Trigger Test_Parms_Bd

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_parms_bd');
   if glob.get_db_constraints
   then
      test_parms_tab.del
         (:old.id
         ,:old.parm_set
         ,:old.parm_seq
         ,:old.result_txt
         ,:old.val0
         ,:old.val1
         ,:old.val2
         ,:old.val3
         ,:old.val4
         ,:old.val5
         ,:old.val6
         ,:old.val7
         ,:old.val8
         ,:old.val9
         ,:old.description
         );
   end if;
end test_parms_bd;
/
select 'TEST_PARMS_BD' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_BD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_BD'
  and  type = 'TRIGGER'
 order by sequence
/

select '***  test_sets  ***' as TABLE_NAME from dual
/


CREATE TRIGGER test_sets_bi
   BEFORE INSERT
   ON test_sets FOR EACH ROW
begin

   -- Trigger Test_Sets_Bi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_sets_bi');
   if glob.get_db_constraints
   then
      test_sets_tab.ins
         (:new.id
         ,:new.user_name
         ,:new.global_set
         ,:new.test_name
         ,:new.parm_set
         ,:new.description
         );
   end if;
end test_sets_bi;
/
select 'TEST_SETS_BI' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_BI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_BI'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER test_sets_bu
   BEFORE UPDATE
   ON test_sets FOR EACH ROW
begin

   -- Trigger Test_Sets_Bu

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_sets_bu');
   if glob.get_db_constraints
   then
      test_sets_tab.upd
         (:old.id
         ,:old.user_name
         ,:new.user_name
         ,:old.global_set
         ,:new.global_set
         ,:old.test_name
         ,:new.test_name
         ,:old.parm_set
         ,:new.parm_set
         ,:old.description
         ,:new.description
         );
   end if;
end test_sets_bu;
/
select 'TEST_SETS_BU' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_BU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_BU'
  and  type = 'TRIGGER'
 order by sequence
/

CREATE TRIGGER test_sets_bd
   BEFORE DELETE
   ON test_sets FOR EACH ROW
begin

   -- Trigger Test_Sets_Bd

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   -- util.log('Trigger test_sets_bd');
   if glob.get_db_constraints
   then
      test_sets_tab.del
         (:old.id
         ,:old.user_name
         ,:old.global_set
         ,:old.test_name
         ,:old.parm_set
         ,:old.description
         );
   end if;
end test_sets_bd;
/
select 'TEST_SETS_BD' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_BD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_BD'
  and  type = 'TRIGGER'
 order by sequence
/



select ' -) create_oltp  ' as FILE_NAME from dual;


-- Script File "create_oltp"
--    Create Online Transaction Processing using generated code

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 



select '***  global_parms  ***' as TABLE_NAME from dual
/

create package global_parms_view
is

   -- Package Global_Parms_View
   --    View functions
   --    (DML, Foreign Keys, Paths, and )
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,n_global_set  in out  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end global_parms_view;
/
select 'GLOBAL_PARMS_VIEW' as "Package:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_VIEW'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_VIEW'
  and  type = 'PACKAGE'
 order by sequence
/

create view global_parms_act
      (id
      ,global_set
      ,db_constraints
      ,fold_strings
      ,ignore_no_change
      ,description
      )
   as select 
       GP.id
      ,GP.global_set
      ,GP.db_constraints
      ,GP.fold_strings
      ,GP.ignore_no_change
      ,GP.description
 from             global_parms GP
/
select 'GLOBAL_PARMS_ACT' as "View:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table global_parms_act is 'Global Parameters that affect generated systems "across the board".'
/

comment on column global_parms_act.id is 'Surrogate Primary Key for these global_parms_act'
/
comment on column global_parms_act.global_set is 'Global Set Name/Code'
/
comment on column global_parms_act.db_constraints is 'Database Constraints setting for  the DTGen GLOB Package.'
/
comment on column global_parms_act.fold_strings is 'Fold Strings setting for  the DTGen GLOB Package.'
/
comment on column global_parms_act.ignore_no_change is 'Ignore No Change setting for  the DTGen GLOB Package.'
/
comment on column global_parms_act.description is 'Description of this Global Set'
/

alter view global_parms_act add constraint global_parms_act_pk
   primary key (id) disable
/


create TRIGGER global_parms_act_ioi
   instead of insert on global_parms_act
   for each row
declare
   n_id  NUMBER(38);
   n_global_set  VARCHAR2(1);
   n_db_constraints  VARCHAR2(1);
   n_fold_strings  VARCHAR2(1);
   n_ignore_no_change  VARCHAR2(1);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Global_Parms_Act_Ioi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_id := :new.id;
   n_global_set := :new.global_set;
   n_db_constraints := :new.db_constraints;
   n_fold_strings := :new.fold_strings;
   n_ignore_no_change := :new.ignore_no_change;
   n_description := :new.description;
   global_parms_view.ins
      (n_id
      ,n_global_set
      ,n_db_constraints
      ,n_fold_strings
      ,n_ignore_no_change
      ,n_description
      );
end global_parms_act_ioi;
/
select 'GLOBAL_PARMS_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER global_parms_act_iou
   instead of update on global_parms_act
   for each row
declare
   n_global_set  VARCHAR2(1);
   n_db_constraints  VARCHAR2(1);
   n_fold_strings  VARCHAR2(1);
   n_ignore_no_change  VARCHAR2(1);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Global_Parms_Act_Iou

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_global_set := :new.global_set;
   n_db_constraints := :new.db_constraints;
   n_fold_strings := :new.fold_strings;
   n_ignore_no_change := :new.ignore_no_change;
   n_description := :new.description;
   global_parms_view.upd 
      (:old.id
      ,:old.global_set
      ,n_global_set
      ,:old.db_constraints
      ,n_db_constraints
      ,:old.fold_strings
      ,n_fold_strings
      ,:old.ignore_no_change
      ,n_ignore_no_change
      ,:old.description
      ,n_description
      );
end global_parms_act_iou;
/
select 'GLOBAL_PARMS_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER global_parms_act_iod
   instead of delete on global_parms_act
   for each row
begin

   -- Trigger Global_Parms_Act_Iod

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   global_parms_view.del 
      (:old.id
      ,:old.global_set
      ,:old.db_constraints
      ,:old.fold_strings
      ,:old.ignore_no_change
      ,:old.description
      );
end global_parms_act_iod;
/
select 'GLOBAL_PARMS_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create package global_parms_dml
is

   -- Package Global_Parms_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   function get_next_id
      return number;
   function get_curr_id
      return number;

   function get_id
      (global_parms_nk1  in  VARCHAR2
      ) return number;
   function get_nk
      (id_in  in  number
      ) return varchar2;

   function tab_to_col
         (id_in  in  number)
      return col_type;

   procedure clear
      (n_buff  in out  global_parms_ACT%ROWTYPE);

   procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure ins
      (n_buff  in out  global_parms_ACT%ROWTYPE);

   procedure upd
      (o_id_in  in  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      );
   procedure upd
      (n_buff  in out  global_parms_ACT%ROWTYPE);

   procedure del
      (o_id_in  in  NUMBER
      );

end global_parms_dml;
/
select 'GLOBAL_PARMS_DML' as "Package:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body global_parms_view
is

-- Package Body Global_Parms_View
--    View functions
--    (DML, Foreign Keys, Paths, and )

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View insert procedure
is
begin
   if util.db_object_exists('GLOBAL_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Insert not allowed on materialized view global_parms.  Inserts on global_parms must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      global_parms_tab.ins
         (n_id
         ,n_global_set
         ,n_db_constraints
         ,n_fold_strings
         ,n_ignore_no_change
         ,n_description
         );
   end if;
   insert into global_parms
         (id
         ,global_set
         ,db_constraints
         ,fold_strings
         ,ignore_no_change
         ,description
         )
   values
         (n_id
         ,n_global_set
         ,n_db_constraints
         ,n_fold_strings
         ,n_ignore_no_change
         ,n_description
         );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,n_global_set  in out  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View Update procedure
is
begin
   if util.db_object_exists('GLOBAL_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Update not allowed on materialized view global_parms.  Updates on global_parms must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      global_parms_tab.upd
         (o_id
         ,o_global_set
         ,n_global_set
         ,o_db_constraints
         ,n_db_constraints
         ,o_fold_strings
         ,n_fold_strings
         ,o_ignore_no_change
         ,n_ignore_no_change
         ,o_description
         ,n_description
         );
   end if;
   update global_parms GP
     set  GP.global_set = n_global_set
         ,GP.db_constraints = n_db_constraints
         ,GP.fold_strings = n_fold_strings
         ,GP.ignore_no_change = n_ignore_no_change
         ,GP.description = n_description
    where GP.id = o_id;
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_global_set  in  VARCHAR2
      ,o_db_constraints  in  VARCHAR2
      ,o_fold_strings  in  VARCHAR2
      ,o_ignore_no_change  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   if util.db_object_exists('GLOBAL_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Delete not allowed on materialized view global_parms.  Deletes on global_parms must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      global_parms_tab.del
         (o_id
         ,o_global_set
         ,o_db_constraints
         ,o_fold_strings
         ,o_ignore_no_change
         ,o_description
         );
   end if;
   delete from global_parms GP
    where GP.id = o_id;
end del;
----------------------------------------
end global_parms_view;
/
select 'GLOBAL_PARMS_VIEW' as "Package Body:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_VIEW'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_VIEW'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create package body global_parms_dml
is

 -- Package Body Global_Parms_Dml
 -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
function get_next_id
      return number
is
   retid  number;
begin
   select global_parms_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
----------------------------------------
function get_curr_id
      return number
is
   retid  number;
begin
   select global_parms_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
----------------------------------------
function get_id
      (global_parms_nk1  in  VARCHAR2
      ) return number
   -- For all the Natural Key Columns, Return an ID
is
   retid  number(38);
begin
   select id
    into  retid
    from  global_parms  GP
    where GP.global_set = global_parms_nk1
    ;
   return retid;
exception
   when no_data_found
   then
      return null;
   when others
   then
      raise;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  number)
   return varchar2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  varchar2(32767);
begin
   select substr(   GP.global_set
                         ,1,32767)
    into  rtxt
    from  global_parms GP
    where GP.id = id_in;
   return rtxt;
exception
   when no_data_found then
      return null;
   when others then
      raise;
end get_nk;
----------------------------------------
function tab_to_col
      (id_in  in  number)
   return col_type
is
   -- This function is duplicated in global_parms_POP
   cursor acur is
      select * from global_parms
       where id = id_in;
   abuf   acur%ROWTYPE;
   rcol      col_type;
begin
   open acur;
   fetch acur into abuf;
   if acur%NOTFOUND
   then
      rcol := COL_TYPE(null);
      close acur;
      return rcol;
   end if;
   rcol := COL_TYPE
             (PAIR_TYPE('global_set', abuf.global_set)
             ,PAIR_TYPE('db_constraints', abuf.db_constraints)
             ,PAIR_TYPE('fold_strings', abuf.fold_strings)
             ,PAIR_TYPE('ignore_no_change', abuf.ignore_no_change)
             ,PAIR_TYPE('description', abuf.description)
                );
   close acur;
   return rcol;
end tab_to_col;
----------------------------------------
procedure clear
      (n_buff  in out  global_parms_ACT%ROWTYPE)
   -- Clear a %ROWTYPE buffer
is
begin
   n_buff.id := null;
   n_buff.global_set := null;
   n_buff.db_constraints := null;
   n_buff.fold_strings := null;
   n_buff.ignore_no_change := null;
   n_buff.description := null;
end clear;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- Application Insert procedure
is
begin
   global_parms_view.ins
      (n_id
      ,n_global_set
      ,n_db_constraints
      ,n_fold_strings
      ,n_ignore_no_change
      ,n_description
      );
end ins;
----------------------------------------
procedure ins
      (n_buff  in out  global_parms_ACT%ROWTYPE)
   -- Application Insert procedure with %ROWTYPE
is
begin
   global_parms_dml.ins
      (n_buff.id
      ,n_buff.global_set
      ,n_buff.db_constraints
      ,n_buff.fold_strings
      ,n_buff.ignore_no_change
      ,n_buff.description
      );
end ins;
----------------------------------------
procedure upd
      (o_id_in  in  NUMBER
      ,n_global_set  in out  VARCHAR2
      ,n_db_constraints  in out  VARCHAR2
      ,n_fold_strings  in out  VARCHAR2
      ,n_ignore_no_change  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      )
   -- Application Update procedure
is
   o_global_set  VARCHAR2(1);
   o_db_constraints  VARCHAR2(1);
   o_fold_strings  VARCHAR2(1);
   o_ignore_no_change  VARCHAR2(1);
   o_description  VARCHAR2(2000);
begin
   -- Retrieve the old (before update) data
   select GP.global_set
         ,GP.db_constraints
         ,GP.fold_strings
         ,GP.ignore_no_change
         ,GP.description
    into  o_global_set
         ,o_db_constraints
         ,o_fold_strings
         ,o_ignore_no_change
         ,o_description
    from  global_parms_act  GP
    where GP.id = o_id_in;
   -- Run the update
   global_parms_view.upd
      (o_id_in
      ,o_global_set
      ,n_global_set
      ,o_db_constraints
      ,n_db_constraints
      ,o_fold_strings
      ,n_fold_strings
      ,o_ignore_no_change
      ,n_ignore_no_change
      ,o_description
      ,n_description
      );
end upd;
----------------------------------------
procedure upd
      (n_buff  in out  global_parms_ACT%ROWTYPE)
is
begin
   global_parms_dml.upd
      (n_buff.id
      ,n_buff.global_set
      ,n_buff.db_constraints
      ,n_buff.fold_strings
      ,n_buff.ignore_no_change
      ,n_buff.description
      );
end upd;
----------------------------------------
procedure del
      (o_id_in  in  NUMBER
      )
   -- Application Delete procedure
is
   o_global_set  VARCHAR2(1);
   o_db_constraints  VARCHAR2(1);
   o_fold_strings  VARCHAR2(1);
   o_ignore_no_change  VARCHAR2(1);
   o_description  VARCHAR2(2000);
begin
   select GP.global_set
         ,GP.db_constraints
         ,GP.fold_strings
         ,GP.ignore_no_change
         ,GP.description
    into  o_global_set
         ,o_db_constraints
         ,o_fold_strings
         ,o_ignore_no_change
         ,o_description
    from  global_parms  GP
    where GP.id = o_id_in;
   global_parms_view.del
      (o_id_in
      ,o_global_set
      ,o_db_constraints
      ,o_fold_strings
      ,o_ignore_no_change
      ,o_description
      );
end del;
----------------------------------------
end global_parms_dml;
/
select 'GLOBAL_PARMS_DML' as "Package Body:"
 from  user_errors
 where name  = 'GLOBAL_PARMS_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'GLOBAL_PARMS_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  parm_sets  ***' as TABLE_NAME from dual
/

create package parm_sets_view
is

   -- Package Parm_Sets_View
   --    View functions
   --    (DML, Foreign Keys, Paths, and )
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,n_parm_set  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end parm_sets_view;
/
select 'PARM_SETS_VIEW' as "Package:"
 from  user_errors
 where name  = 'PARM_SETS_VIEW'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_VIEW'
  and  type = 'PACKAGE'
 order by sequence
/

create view parm_sets_act
      (id
      ,parm_set
      ,description
      )
   as select 
       PS.id
      ,PS.parm_set
      ,PS.description
 from             parm_sets PS
/
select 'PARM_SETS_ACT' as "View:"
 from  user_errors
 where name  = 'PARM_SETS_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table parm_sets_act is 'Parameter Sets are groups of test results and parameters used be each unit test.'
/

comment on column parm_sets_act.id is 'Surrogate Primary Key for these parm_sets_act'
/
comment on column parm_sets_act.parm_set is 'Parameter Set Name'
/
comment on column parm_sets_act.description is 'Description for this Parameter Set'
/

alter view parm_sets_act add constraint parm_sets_act_pk
   primary key (id) disable
/


create TRIGGER parm_sets_act_ioi
   instead of insert on parm_sets_act
   for each row
declare
   n_id  NUMBER(38);
   n_parm_set  VARCHAR2(30);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Parm_Sets_Act_Ioi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_id := :new.id;
   n_parm_set := :new.parm_set;
   n_description := :new.description;
   parm_sets_view.ins
      (n_id
      ,n_parm_set
      ,n_description
      );
end parm_sets_act_ioi;
/
select 'PARM_SETS_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER parm_sets_act_iou
   instead of update on parm_sets_act
   for each row
declare
   n_parm_set  VARCHAR2(30);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Parm_Sets_Act_Iou

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_parm_set := :new.parm_set;
   n_description := :new.description;
   parm_sets_view.upd 
      (:old.id
      ,:old.parm_set
      ,n_parm_set
      ,:old.description
      ,n_description
      );
end parm_sets_act_iou;
/
select 'PARM_SETS_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER parm_sets_act_iod
   instead of delete on parm_sets_act
   for each row
begin

   -- Trigger Parm_Sets_Act_Iod

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   parm_sets_view.del 
      (:old.id
      ,:old.parm_set
      ,:old.description
      );
end parm_sets_act_iod;
/
select 'PARM_SETS_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'PARM_SETS_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create package parm_sets_dml
is

   -- Package Parm_Sets_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   function get_next_id
      return number;
   function get_curr_id
      return number;

   function get_id
      (parm_sets_nk1  in  VARCHAR2
      ) return number;
   function get_nk
      (id_in  in  number
      ) return varchar2;

   function tab_to_col
         (id_in  in  number)
      return col_type;

   procedure clear
      (n_buff  in out  parm_sets_ACT%ROWTYPE);

   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure ins
      (n_buff  in out  parm_sets_ACT%ROWTYPE);

   procedure upd
      (o_id_in  in  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      );
   procedure upd
      (n_buff  in out  parm_sets_ACT%ROWTYPE);

   procedure del
      (o_id_in  in  NUMBER
      );

end parm_sets_dml;
/
select 'PARM_SETS_DML' as "Package:"
 from  user_errors
 where name  = 'PARM_SETS_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body parm_sets_view
is

-- Package Body Parm_Sets_View
--    View functions
--    (DML, Foreign Keys, Paths, and )

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View insert procedure
is
begin
   if util.db_object_exists('PARM_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Insert not allowed on materialized view parm_sets.  Inserts on parm_sets must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      parm_sets_tab.ins
         (n_id
         ,n_parm_set
         ,n_description
         );
   end if;
   insert into parm_sets
         (id
         ,parm_set
         ,description
         )
   values
         (n_id
         ,n_parm_set
         ,n_description
         );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,n_parm_set  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View Update procedure
is
begin
   if util.db_object_exists('PARM_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Update not allowed on materialized view parm_sets.  Updates on parm_sets must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      parm_sets_tab.upd
         (o_id
         ,o_parm_set
         ,n_parm_set
         ,o_description
         ,n_description
         );
   end if;
   update parm_sets PS
     set  PS.parm_set = n_parm_set
         ,PS.description = n_description
    where PS.id = o_id;
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   if util.db_object_exists('PARM_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Delete not allowed on materialized view parm_sets.  Deletes on parm_sets must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      parm_sets_tab.del
         (o_id
         ,o_parm_set
         ,o_description
         );
   end if;
   delete from parm_sets PS
    where PS.id = o_id;
end del;
----------------------------------------
end parm_sets_view;
/
select 'PARM_SETS_VIEW' as "Package Body:"
 from  user_errors
 where name  = 'PARM_SETS_VIEW'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_VIEW'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create package body parm_sets_dml
is

 -- Package Body Parm_Sets_Dml
 -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
function get_next_id
      return number
is
   retid  number;
begin
   select parm_sets_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
----------------------------------------
function get_curr_id
      return number
is
   retid  number;
begin
   select parm_sets_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
----------------------------------------
function get_id
      (parm_sets_nk1  in  VARCHAR2
      ) return number
   -- For all the Natural Key Columns, Return an ID
is
   retid  number(38);
begin
   select id
    into  retid
    from  parm_sets  PS
    where PS.parm_set = parm_sets_nk1
    ;
   return retid;
exception
   when no_data_found
   then
      return null;
   when others
   then
      raise;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  number)
   return varchar2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  varchar2(32767);
begin
   select substr(   PS.parm_set
                         ,1,32767)
    into  rtxt
    from  parm_sets PS
    where PS.id = id_in;
   return rtxt;
exception
   when no_data_found then
      return null;
   when others then
      raise;
end get_nk;
----------------------------------------
function tab_to_col
      (id_in  in  number)
   return col_type
is
   -- This function is duplicated in parm_sets_POP
   cursor acur is
      select * from parm_sets
       where id = id_in;
   abuf   acur%ROWTYPE;
   rcol      col_type;
begin
   open acur;
   fetch acur into abuf;
   if acur%NOTFOUND
   then
      rcol := COL_TYPE(null);
      close acur;
      return rcol;
   end if;
   rcol := COL_TYPE
             (PAIR_TYPE('parm_set', abuf.parm_set)
             ,PAIR_TYPE('description', abuf.description)
                );
   close acur;
   return rcol;
end tab_to_col;
----------------------------------------
procedure clear
      (n_buff  in out  parm_sets_ACT%ROWTYPE)
   -- Clear a %ROWTYPE buffer
is
begin
   n_buff.id := null;
   n_buff.parm_set := null;
   n_buff.description := null;
end clear;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- Application Insert procedure
is
begin
   parm_sets_view.ins
      (n_id
      ,n_parm_set
      ,n_description
      );
end ins;
----------------------------------------
procedure ins
      (n_buff  in out  parm_sets_ACT%ROWTYPE)
   -- Application Insert procedure with %ROWTYPE
is
begin
   parm_sets_dml.ins
      (n_buff.id
      ,n_buff.parm_set
      ,n_buff.description
      );
end ins;
----------------------------------------
procedure upd
      (o_id_in  in  NUMBER
      ,n_parm_set  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      )
   -- Application Update procedure
is
   o_parm_set  VARCHAR2(30);
   o_description  VARCHAR2(2000);
begin
   -- Retrieve the old (before update) data
   select PS.parm_set
         ,PS.description
    into  o_parm_set
         ,o_description
    from  parm_sets_act  PS
    where PS.id = o_id_in;
   -- Run the update
   parm_sets_view.upd
      (o_id_in
      ,o_parm_set
      ,n_parm_set
      ,o_description
      ,n_description
      );
end upd;
----------------------------------------
procedure upd
      (n_buff  in out  parm_sets_ACT%ROWTYPE)
is
begin
   parm_sets_dml.upd
      (n_buff.id
      ,n_buff.parm_set
      ,n_buff.description
      );
end upd;
----------------------------------------
procedure del
      (o_id_in  in  NUMBER
      )
   -- Application Delete procedure
is
   o_parm_set  VARCHAR2(30);
   o_description  VARCHAR2(2000);
begin
   select PS.parm_set
         ,PS.description
    into  o_parm_set
         ,o_description
    from  parm_sets  PS
    where PS.id = o_id_in;
   parm_sets_view.del
      (o_id_in
      ,o_parm_set
      ,o_description
      );
end del;
----------------------------------------
end parm_sets_dml;
/
select 'PARM_SETS_DML' as "Package Body:"
 from  user_errors
 where name  = 'PARM_SETS_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'PARM_SETS_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  test_parms  ***' as TABLE_NAME from dual
/

create package test_parms_view
is

   -- Package Test_Parms_View
   --    View functions
   --    (DML, Foreign Keys, Paths, and )
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_sets_nk1  in  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,o_parm_seq  in  NUMBER
      ,n_parm_seq  in out  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,n_result_txt  in out  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_seq  in  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,o_description  in  VARCHAR2
      );
end test_parms_view;
/
select 'TEST_PARMS_VIEW' as "Package:"
 from  user_errors
 where name  = 'TEST_PARMS_VIEW'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_VIEW'
  and  type = 'PACKAGE'
 order by sequence
/

create view test_parms_act
      (id
      ,parm_set
      ,parm_sets_nk1
      ,parm_seq
      ,result_txt
      ,val0
      ,val1
      ,val2
      ,val3
      ,val4
      ,val5
      ,val6
      ,val7
      ,val8
      ,val9
      ,description
      )
   as select 
       TP.id
      ,TP.parm_set
      ,PS.parm_set
      ,TP.parm_seq
      ,TP.result_txt
      ,TP.val0
      ,TP.val1
      ,TP.val2
      ,TP.val3
      ,TP.val4
      ,TP.val5
      ,TP.val6
      ,TP.val7
      ,TP.val8
      ,TP.val9
      ,TP.description
 from             test_parms TP
       inner join parm_sets_act PS on PS.id = TP.parm_set
/
select 'TEST_PARMS_ACT' as "View:"
 from  user_errors
 where name  = 'TEST_PARMS_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table test_parms_act is 'Actual test parameter values, sequenced for each parameter set.'
/

comment on column test_parms_act.id is 'Surrogate Primary Key for these test_parms_act'
/
comment on column test_parms_act.parm_set is 'Parameter Set Name'
/
comment on column test_parms_act.parm_seq is 'Parameter Set Sequence Number'
/
comment on column test_parms_act.result_txt is 'Expected Result String '
/
comment on column test_parms_act.val0 is 'Value 0 of the Parameter Set'
/
comment on column test_parms_act.val1 is 'Value 1 of the Parameter Set'
/
comment on column test_parms_act.val2 is 'Value 2 of the Parameter Set'
/
comment on column test_parms_act.val3 is 'Value 3 of the Parameter Set'
/
comment on column test_parms_act.val4 is 'Value 4 of the Parameter Set'
/
comment on column test_parms_act.val5 is 'Value 5 of the Parameter Set'
/
comment on column test_parms_act.val6 is 'Value 6 of the Parameter Set'
/
comment on column test_parms_act.val7 is 'Value 7 of the Parameter Set'
/
comment on column test_parms_act.val8 is 'Value 8 of the Parameter Set'
/
comment on column test_parms_act.val9 is 'Value 9 of the Parameter Set'
/
comment on column test_parms_act.description is 'Description for this Parameter Set Sequence'
/
comment on column test_parms_act.parm_sets_nk1 is 'PARM_SETS Natural Key Value 1: Parameter Set Name'
/

alter view test_parms_act add constraint test_parms_act_pk
   primary key (id) disable
/

alter view test_parms_act add constraint test_parms_act_fk1
   foreign key (parm_set) references parm_sets_act (id) disable
/

create TRIGGER test_parms_act_ioi
   instead of insert on test_parms_act
   for each row
declare
   n_id  NUMBER(38);
   n_parm_set  NUMBER(38);
   n_parm_seq  NUMBER;
   n_result_txt  VARCHAR2(4000);
   n_val0  VARCHAR2(4000);
   n_val1  VARCHAR2(4000);
   n_val2  VARCHAR2(4000);
   n_val3  VARCHAR2(4000);
   n_val4  VARCHAR2(4000);
   n_val5  VARCHAR2(4000);
   n_val6  VARCHAR2(4000);
   n_val7  VARCHAR2(4000);
   n_val8  VARCHAR2(4000);
   n_val9  VARCHAR2(4000);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Test_Parms_Act_Ioi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_id := :new.id;
   n_parm_set := :new.parm_set;
   n_parm_seq := :new.parm_seq;
   n_result_txt := :new.result_txt;
   n_val0 := :new.val0;
   n_val1 := :new.val1;
   n_val2 := :new.val2;
   n_val3 := :new.val3;
   n_val4 := :new.val4;
   n_val5 := :new.val5;
   n_val6 := :new.val6;
   n_val7 := :new.val7;
   n_val8 := :new.val8;
   n_val9 := :new.val9;
   n_description := :new.description;
   test_parms_view.ins
      (n_id
      ,n_parm_set
      ,:new.parm_sets_nk1
      ,n_parm_seq
      ,n_result_txt
      ,n_val0
      ,n_val1
      ,n_val2
      ,n_val3
      ,n_val4
      ,n_val5
      ,n_val6
      ,n_val7
      ,n_val8
      ,n_val9
      ,n_description
      );
end test_parms_act_ioi;
/
select 'TEST_PARMS_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER test_parms_act_iou
   instead of update on test_parms_act
   for each row
declare
   n_parm_set  NUMBER(38);
   n_parm_seq  NUMBER;
   n_result_txt  VARCHAR2(4000);
   n_val0  VARCHAR2(4000);
   n_val1  VARCHAR2(4000);
   n_val2  VARCHAR2(4000);
   n_val3  VARCHAR2(4000);
   n_val4  VARCHAR2(4000);
   n_val5  VARCHAR2(4000);
   n_val6  VARCHAR2(4000);
   n_val7  VARCHAR2(4000);
   n_val8  VARCHAR2(4000);
   n_val9  VARCHAR2(4000);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Test_Parms_Act_Iou

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_parm_set := :new.parm_set;
   n_parm_seq := :new.parm_seq;
   n_result_txt := :new.result_txt;
   n_val0 := :new.val0;
   n_val1 := :new.val1;
   n_val2 := :new.val2;
   n_val3 := :new.val3;
   n_val4 := :new.val4;
   n_val5 := :new.val5;
   n_val6 := :new.val6;
   n_val7 := :new.val7;
   n_val8 := :new.val8;
   n_val9 := :new.val9;
   n_description := :new.description;
   test_parms_view.upd 
      (:old.id
      ,:old.parm_set
      ,:old.parm_sets_nk1
      ,n_parm_set
      ,:new.parm_sets_nk1
      ,:old.parm_seq
      ,n_parm_seq
      ,:old.result_txt
      ,n_result_txt
      ,:old.val0
      ,n_val0
      ,:old.val1
      ,n_val1
      ,:old.val2
      ,n_val2
      ,:old.val3
      ,n_val3
      ,:old.val4
      ,n_val4
      ,:old.val5
      ,n_val5
      ,:old.val6
      ,n_val6
      ,:old.val7
      ,n_val7
      ,:old.val8
      ,n_val8
      ,:old.val9
      ,n_val9
      ,:old.description
      ,n_description
      );
end test_parms_act_iou;
/
select 'TEST_PARMS_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER test_parms_act_iod
   instead of delete on test_parms_act
   for each row
begin

   -- Trigger Test_Parms_Act_Iod

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   test_parms_view.del 
      (:old.id
      ,:old.parm_set
      ,:old.parm_seq
      ,:old.result_txt
      ,:old.val0
      ,:old.val1
      ,:old.val2
      ,:old.val3
      ,:old.val4
      ,:old.val5
      ,:old.val6
      ,:old.val7
      ,:old.val8
      ,:old.val9
      ,:old.description
      );
end test_parms_act_iod;
/
select 'TEST_PARMS_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'TEST_PARMS_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create package test_parms_dml
is

   -- Package Test_Parms_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   function get_next_id
      return number;
   function get_curr_id
      return number;

   function get_id
      (test_parms_nk1  in  VARCHAR2
      ,test_parms_nk2  in  NUMBER
      ) return number;
   function get_nk
      (id_in  in  number
      ) return varchar2;

   function tab_to_col
         (id_in  in  number)
      return col_type;

   procedure clear
      (n_buff  in out  test_parms_ACT%ROWTYPE);

   procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure ins
      (n_buff  in out  test_parms_ACT%ROWTYPE);

   procedure upd
      (o_id_in  in  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      );
   procedure upd
      (n_buff  in out  test_parms_ACT%ROWTYPE);

   procedure del
      (o_id_in  in  NUMBER
      );

end test_parms_dml;
/
select 'TEST_PARMS_DML' as "Package:"
 from  user_errors
 where name  = 'TEST_PARMS_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body test_parms_view
is

-- Package Body Test_Parms_View
--    View functions
--    (DML, Foreign Keys, Paths, and )

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View insert procedure
is
begin
   if util.db_object_exists('TEST_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Insert not allowed on materialized view test_parms.  Inserts on test_parms must be performed on the central database.');
   end if;
   -- Set n_parm_set, if needed
   if     n_parm_set is null
      and n_parm_sets_nk1 is not null
   then
      n_parm_set := 
         parm_sets_dml.get_id
            (n_parm_sets_nk1
            );
   end if;
   if not glob.get_db_constraints
   then
      test_parms_tab.ins
         (n_id
         ,n_parm_set
         ,n_parm_seq
         ,n_result_txt
         ,n_val0
         ,n_val1
         ,n_val2
         ,n_val3
         ,n_val4
         ,n_val5
         ,n_val6
         ,n_val7
         ,n_val8
         ,n_val9
         ,n_description
         );
   end if;
   insert into test_parms
         (id
         ,parm_set
         ,parm_seq
         ,result_txt
         ,val0
         ,val1
         ,val2
         ,val3
         ,val4
         ,val5
         ,val6
         ,val7
         ,val8
         ,val9
         ,description
         )
   values
         (n_id
         ,n_parm_set
         ,n_parm_seq
         ,n_result_txt
         ,n_val0
         ,n_val1
         ,n_val2
         ,n_val3
         ,n_val4
         ,n_val5
         ,n_val6
         ,n_val7
         ,n_val8
         ,n_val9
         ,n_description
         );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_sets_nk1  in  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,o_parm_seq  in  NUMBER
      ,n_parm_seq  in out  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,n_result_txt  in out  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View Update procedure
is
begin
   if util.db_object_exists('TEST_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Update not allowed on materialized view test_parms.  Updates on test_parms must be performed on the central database.');
   end if;
   -- Set n_parm_set, if needed
   if     n_parm_set = o_parm_set
      and (   not (n_parm_sets_nk1 = o_parm_sets_nk1)
          )
   then
      n_parm_set := 
         parm_sets_dml.get_id
            (n_parm_sets_nk1
            );
   end if;
   if not glob.get_db_constraints
   then
      test_parms_tab.upd
         (o_id
         ,o_parm_set
         ,n_parm_set
         ,o_parm_seq
         ,n_parm_seq
         ,o_result_txt
         ,n_result_txt
         ,o_val0
         ,n_val0
         ,o_val1
         ,n_val1
         ,o_val2
         ,n_val2
         ,o_val3
         ,n_val3
         ,o_val4
         ,n_val4
         ,o_val5
         ,n_val5
         ,o_val6
         ,n_val6
         ,o_val7
         ,n_val7
         ,o_val8
         ,n_val8
         ,o_val9
         ,n_val9
         ,o_description
         ,n_description
         );
   end if;
   update test_parms TP
     set  TP.parm_set = n_parm_set
         ,TP.parm_seq = n_parm_seq
         ,TP.result_txt = n_result_txt
         ,TP.val0 = n_val0
         ,TP.val1 = n_val1
         ,TP.val2 = n_val2
         ,TP.val3 = n_val3
         ,TP.val4 = n_val4
         ,TP.val5 = n_val5
         ,TP.val6 = n_val6
         ,TP.val7 = n_val7
         ,TP.val8 = n_val8
         ,TP.val9 = n_val9
         ,TP.description = n_description
    where TP.id = o_id;
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_parm_set  in  NUMBER
      ,o_parm_seq  in  NUMBER
      ,o_result_txt  in  VARCHAR2
      ,o_val0  in  VARCHAR2
      ,o_val1  in  VARCHAR2
      ,o_val2  in  VARCHAR2
      ,o_val3  in  VARCHAR2
      ,o_val4  in  VARCHAR2
      ,o_val5  in  VARCHAR2
      ,o_val6  in  VARCHAR2
      ,o_val7  in  VARCHAR2
      ,o_val8  in  VARCHAR2
      ,o_val9  in  VARCHAR2
      ,o_description  in  VARCHAR2
      )
is
begin
   if util.db_object_exists('TEST_PARMS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Delete not allowed on materialized view test_parms.  Deletes on test_parms must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      test_parms_tab.del
         (o_id
         ,o_parm_set
         ,o_parm_seq
         ,o_result_txt
         ,o_val0
         ,o_val1
         ,o_val2
         ,o_val3
         ,o_val4
         ,o_val5
         ,o_val6
         ,o_val7
         ,o_val8
         ,o_val9
         ,o_description
         );
   end if;
   delete from test_parms TP
    where TP.id = o_id;
end del;
----------------------------------------
end test_parms_view;
/
select 'TEST_PARMS_VIEW' as "Package Body:"
 from  user_errors
 where name  = 'TEST_PARMS_VIEW'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_VIEW'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create package body test_parms_dml
is

 -- Package Body Test_Parms_Dml
 -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
function get_next_id
      return number
is
   retid  number;
begin
   select test_parms_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
----------------------------------------
function get_curr_id
      return number
is
   retid  number;
begin
   select test_parms_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
----------------------------------------
function get_id
      (test_parms_nk1  in  VARCHAR2
      ,test_parms_nk2  in  NUMBER
      ) return number
   -- For all the Natural Key Columns, Return an ID
is
   retid  number(38);
begin
   select id
    into  retid
    from  test_parms  TP
    where TP.parm_set = parm_sets_dml.get_id
             (test_parms_nk1
             )
     and  TP.parm_seq = test_parms_nk2
    ;
   return retid;
exception
   when no_data_found
   then
      return null;
   when others
   then
      raise;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  number)
   return varchar2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  varchar2(32767);
begin
   select substr(   parm_sets_dml.get_nk(TP.parm_set)
    || util.nk_sep || TP.parm_seq
                         ,1,32767)
    into  rtxt
    from  test_parms TP
    where TP.id = id_in;
   return rtxt;
exception
   when no_data_found then
      return null;
   when others then
      raise;
end get_nk;
----------------------------------------
function tab_to_col
      (id_in  in  number)
   return col_type
is
   -- This function is duplicated in test_parms_POP
   cursor acur is
      select * from test_parms
       where id = id_in;
   abuf   acur%ROWTYPE;
   rcol      col_type;
begin
   open acur;
   fetch acur into abuf;
   if acur%NOTFOUND
   then
      rcol := COL_TYPE(null);
      close acur;
      return rcol;
   end if;
   rcol := COL_TYPE
             (PAIR_TYPE('parm_set', to_char(abuf.parm_set))
             ,PAIR_TYPE('parm_seq', to_char(abuf.parm_seq))
             ,PAIR_TYPE('result_txt', abuf.result_txt)
             ,PAIR_TYPE('val0', abuf.val0)
             ,PAIR_TYPE('val1', abuf.val1)
             ,PAIR_TYPE('val2', abuf.val2)
             ,PAIR_TYPE('val3', abuf.val3)
             ,PAIR_TYPE('val4', abuf.val4)
             ,PAIR_TYPE('val5', abuf.val5)
             ,PAIR_TYPE('val6', abuf.val6)
             ,PAIR_TYPE('val7', abuf.val7)
             ,PAIR_TYPE('val8', abuf.val8)
             ,PAIR_TYPE('val9', abuf.val9)
             ,PAIR_TYPE('description', abuf.description)
                );
   close acur;
   return rcol;
end tab_to_col;
----------------------------------------
procedure clear
      (n_buff  in out  test_parms_ACT%ROWTYPE)
   -- Clear a %ROWTYPE buffer
is
begin
   n_buff.id := null;
   n_buff.parm_set := null;
   n_buff.parm_sets_nk1 := null;
   n_buff.parm_seq := null;
   n_buff.result_txt := null;
   n_buff.val0 := null;
   n_buff.val1 := null;
   n_buff.val2 := null;
   n_buff.val3 := null;
   n_buff.val4 := null;
   n_buff.val5 := null;
   n_buff.val6 := null;
   n_buff.val7 := null;
   n_buff.val8 := null;
   n_buff.val9 := null;
   n_buff.description := null;
end clear;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- Application Insert procedure
is
begin
   test_parms_view.ins
      (n_id
      ,n_parm_set
      ,n_parm_sets_nk1_in
      ,n_parm_seq
      ,n_result_txt
      ,n_val0
      ,n_val1
      ,n_val2
      ,n_val3
      ,n_val4
      ,n_val5
      ,n_val6
      ,n_val7
      ,n_val8
      ,n_val9
      ,n_description
      );
end ins;
----------------------------------------
procedure ins
      (n_buff  in out  test_parms_ACT%ROWTYPE)
   -- Application Insert procedure with %ROWTYPE
is
begin
   test_parms_dml.ins
      (n_buff.id
      ,n_buff.parm_set
      ,n_buff.parm_sets_nk1
      ,n_buff.parm_seq
      ,n_buff.result_txt
      ,n_buff.val0
      ,n_buff.val1
      ,n_buff.val2
      ,n_buff.val3
      ,n_buff.val4
      ,n_buff.val5
      ,n_buff.val6
      ,n_buff.val7
      ,n_buff.val8
      ,n_buff.val9
      ,n_buff.description
      );
end ins;
----------------------------------------
procedure upd
      (o_id_in  in  NUMBER
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_parm_seq  in out  NUMBER
      ,n_result_txt  in out  VARCHAR2
      ,n_val0  in out  VARCHAR2
      ,n_val1  in out  VARCHAR2
      ,n_val2  in out  VARCHAR2
      ,n_val3  in out  VARCHAR2
      ,n_val4  in out  VARCHAR2
      ,n_val5  in out  VARCHAR2
      ,n_val6  in out  VARCHAR2
      ,n_val7  in out  VARCHAR2
      ,n_val8  in out  VARCHAR2
      ,n_val9  in out  VARCHAR2
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      )
   -- Application Update procedure
is
   o_parm_set  NUMBER(38);
   o_parm_sets_nk1  VARCHAR2(30);
   n_parm_sets_nk1  VARCHAR2(30);
   o_parm_seq  NUMBER;
   o_result_txt  VARCHAR2(4000);
   o_val0  VARCHAR2(4000);
   o_val1  VARCHAR2(4000);
   o_val2  VARCHAR2(4000);
   o_val3  VARCHAR2(4000);
   o_val4  VARCHAR2(4000);
   o_val5  VARCHAR2(4000);
   o_val6  VARCHAR2(4000);
   o_val7  VARCHAR2(4000);
   o_val8  VARCHAR2(4000);
   o_val9  VARCHAR2(4000);
   o_description  VARCHAR2(2000);
begin
   -- Retrieve the old (before update) data
   select TP.parm_set
         ,TP.parm_sets_nk1
         ,TP.parm_seq
         ,TP.result_txt
         ,TP.val0
         ,TP.val1
         ,TP.val2
         ,TP.val3
         ,TP.val4
         ,TP.val5
         ,TP.val6
         ,TP.val7
         ,TP.val8
         ,TP.val9
         ,TP.description
    into  o_parm_set
         ,o_parm_sets_nk1
         ,o_parm_seq
         ,o_result_txt
         ,o_val0
         ,o_val1
         ,o_val2
         ,o_val3
         ,o_val4
         ,o_val5
         ,o_val6
         ,o_val7
         ,o_val8
         ,o_val9
         ,o_description
    from  test_parms_act  TP
    where TP.id = o_id_in;
   -- Set the Natural Key data as indicated by NKDATA_PROVIDED
   if upper(substr(nvl(nkdata_provided_in,'Y'),1,1)) in ('Y','T')
   then
      -- Use the Natural Key Data that was provided
      n_parm_sets_nk1 := n_parm_sets_nk1_in;
   else
      -- Use the old Natural Key Data
      n_parm_sets_nk1 := o_parm_sets_nk1;
   end if;
   -- Run the update
   test_parms_view.upd
      (o_id_in
      ,o_parm_set
      ,o_parm_sets_nk1
      ,n_parm_set
      ,n_parm_sets_nk1
      ,o_parm_seq
      ,n_parm_seq
      ,o_result_txt
      ,n_result_txt
      ,o_val0
      ,n_val0
      ,o_val1
      ,n_val1
      ,o_val2
      ,n_val2
      ,o_val3
      ,n_val3
      ,o_val4
      ,n_val4
      ,o_val5
      ,n_val5
      ,o_val6
      ,n_val6
      ,o_val7
      ,n_val7
      ,o_val8
      ,n_val8
      ,o_val9
      ,n_val9
      ,o_description
      ,n_description
      );
end upd;
----------------------------------------
procedure upd
      (n_buff  in out  test_parms_ACT%ROWTYPE)
is
begin
   test_parms_dml.upd
      (n_buff.id
      ,n_buff.parm_set
      ,n_buff.parm_sets_nk1
      ,n_buff.parm_seq
      ,n_buff.result_txt
      ,n_buff.val0
      ,n_buff.val1
      ,n_buff.val2
      ,n_buff.val3
      ,n_buff.val4
      ,n_buff.val5
      ,n_buff.val6
      ,n_buff.val7
      ,n_buff.val8
      ,n_buff.val9
      ,n_buff.description
      ,'Y'
      );
end upd;
----------------------------------------
procedure del
      (o_id_in  in  NUMBER
      )
   -- Application Delete procedure
is
   o_parm_set  NUMBER(38);
   o_parm_seq  NUMBER;
   o_result_txt  VARCHAR2(4000);
   o_val0  VARCHAR2(4000);
   o_val1  VARCHAR2(4000);
   o_val2  VARCHAR2(4000);
   o_val3  VARCHAR2(4000);
   o_val4  VARCHAR2(4000);
   o_val5  VARCHAR2(4000);
   o_val6  VARCHAR2(4000);
   o_val7  VARCHAR2(4000);
   o_val8  VARCHAR2(4000);
   o_val9  VARCHAR2(4000);
   o_description  VARCHAR2(2000);
begin
   select TP.parm_set
         ,TP.parm_seq
         ,TP.result_txt
         ,TP.val0
         ,TP.val1
         ,TP.val2
         ,TP.val3
         ,TP.val4
         ,TP.val5
         ,TP.val6
         ,TP.val7
         ,TP.val8
         ,TP.val9
         ,TP.description
    into  o_parm_set
         ,o_parm_seq
         ,o_result_txt
         ,o_val0
         ,o_val1
         ,o_val2
         ,o_val3
         ,o_val4
         ,o_val5
         ,o_val6
         ,o_val7
         ,o_val8
         ,o_val9
         ,o_description
    from  test_parms  TP
    where TP.id = o_id_in;
   test_parms_view.del
      (o_id_in
      ,o_parm_set
      ,o_parm_seq
      ,o_result_txt
      ,o_val0
      ,o_val1
      ,o_val2
      ,o_val3
      ,o_val4
      ,o_val5
      ,o_val6
      ,o_val7
      ,o_val8
      ,o_val9
      ,o_description
      );
end del;
----------------------------------------
end test_parms_dml;
/
select 'TEST_PARMS_DML' as "Package Body:"
 from  user_errors
 where name  = 'TEST_PARMS_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_PARMS_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/

select '***  test_sets  ***' as TABLE_NAME from dual
/

create package test_sets_view
is

   -- Package Test_Sets_View
   --    View functions
   --    (DML, Foreign Keys, Paths, and )
   --    

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1  in  VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure upd
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,n_user_name  in out  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_global_parms_nk1  in  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1  in  VARCHAR2
      ,o_test_name  in  VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_parm_sets_nk1  in  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      );
   procedure del
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_test_name  in  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_description  in  VARCHAR2
      );
end test_sets_view;
/
select 'TEST_SETS_VIEW' as "Package:"
 from  user_errors
 where name  = 'TEST_SETS_VIEW'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_VIEW'
  and  type = 'PACKAGE'
 order by sequence
/

create view test_sets_act
      (id
      ,user_name
      ,global_set
      ,global_parms_nk1
      ,test_name
      ,parm_set
      ,parm_sets_nk1
      ,description
      )
   as select 
       TS.id
      ,TS.user_name
      ,TS.global_set
      ,GP.global_set
      ,TS.test_name
      ,TS.parm_set
      ,PS.parm_set
      ,TS.description
 from             test_sets TS
       inner join global_parms_act GP on GP.id = TS.global_set
       inner join parm_sets_act PS on PS.id = TS.parm_set
/
select 'TEST_SETS_ACT' as "View:"
 from  user_errors
 where name  = 'TEST_SETS_ACT'
  and  type  = 'VIEW'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_ACT'
  and  type = 'VIEW'
 order by sequence
/

comment on table test_sets_act is 'Individual tests and their associated parameter sets.'
/

comment on column test_sets_act.id is 'Surrogate Primary Key for these test_sets_act'
/
comment on column test_sets_act.user_name is 'User name running this unit test.'
/
comment on column test_sets_act.global_set is 'Global set used for this unit test.'
/
comment on column test_sets_act.test_name is 'Test name used for this unit test.'
/
comment on column test_sets_act.parm_set is 'Sequence of Parameter Values and Result for this unit test.'
/
comment on column test_sets_act.description is 'Description of this unit test.'
/
comment on column test_sets_act.global_parms_nk1 is 'GLOBAL_PARMS Natural Key Value 1: Global Set Name/Code'
/
comment on column test_sets_act.parm_sets_nk1 is 'PARM_SETS Natural Key Value 1: Parameter Set Name'
/

alter view test_sets_act add constraint test_sets_act_pk
   primary key (id) disable
/

alter view test_sets_act add constraint test_sets_act_fk1
   foreign key (global_set) references global_parms_act (id) disable
/
alter view test_sets_act add constraint test_sets_act_fk2
   foreign key (parm_set) references parm_sets_act (id) disable
/

create TRIGGER test_sets_act_ioi
   instead of insert on test_sets_act
   for each row
declare
   n_id  NUMBER(38);
   n_user_name  VARCHAR2(30);
   n_global_set  NUMBER(38);
   n_test_name  VARCHAR2(60);
   n_parm_set  NUMBER(38);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Test_Sets_Act_Ioi

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_id := :new.id;
   n_user_name := :new.user_name;
   n_global_set := :new.global_set;
   n_test_name := :new.test_name;
   n_parm_set := :new.parm_set;
   n_description := :new.description;
   test_sets_view.ins
      (n_id
      ,n_user_name
      ,n_global_set
      ,:new.global_parms_nk1
      ,n_test_name
      ,n_parm_set
      ,:new.parm_sets_nk1
      ,n_description
      );
end test_sets_act_ioi;
/
select 'TEST_SETS_ACT_IOI' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_ACT_IOI'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_ACT_IOI'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER test_sets_act_iou
   instead of update on test_sets_act
   for each row
declare
   n_user_name  VARCHAR2(30);
   n_global_set  NUMBER(38);
   n_test_name  VARCHAR2(60);
   n_parm_set  NUMBER(38);
   n_description  VARCHAR2(2000);
begin

   -- Trigger Test_Sets_Act_Iou

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   n_user_name := :new.user_name;
   n_global_set := :new.global_set;
   n_test_name := :new.test_name;
   n_parm_set := :new.parm_set;
   n_description := :new.description;
   test_sets_view.upd 
      (:old.id
      ,:old.user_name
      ,n_user_name
      ,:old.global_set
      ,:old.global_parms_nk1
      ,n_global_set
      ,:new.global_parms_nk1
      ,:old.test_name
      ,n_test_name
      ,:old.parm_set
      ,:old.parm_sets_nk1
      ,n_parm_set
      ,:new.parm_sets_nk1
      ,:old.description
      ,n_description
      );
end test_sets_act_iou;
/
select 'TEST_SETS_ACT_IOU' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_ACT_IOU'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_ACT_IOU'
  and  type = 'TRIGGER'
 order by sequence
/

create TRIGGER test_sets_act_iod
   instead of delete on test_sets_act
   for each row
begin

   -- Trigger Test_Sets_Act_Iod

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   test_sets_view.del 
      (:old.id
      ,:old.user_name
      ,:old.global_set
      ,:old.test_name
      ,:old.parm_set
      ,:old.description
      );
end test_sets_act_iod;
/
select 'TEST_SETS_ACT_IOD' as "Trigger:"
 from  user_errors
 where name  = 'TEST_SETS_ACT_IOD'
  and  type  = 'TRIGGER'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_ACT_IOD'
  and  type = 'TRIGGER'
 order by sequence
/

create package test_sets_dml
is

   -- Package Test_Sets_Dml
   -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


   function get_next_id
      return number;
   function get_curr_id
      return number;

   function get_id
      (test_sets_nk1  in  VARCHAR2
      ,test_sets_nk2  in  VARCHAR2
      ,test_sets_nk3  in  VARCHAR2
      ,test_sets_nk4  in  VARCHAR2
      ) return number;
   function get_nk
      (id_in  in  number
      ) return varchar2;

   function tab_to_col
         (id_in  in  number)
      return col_type;

   procedure clear
      (n_buff  in out  test_sets_ACT%ROWTYPE);

   procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1_in  in  VARCHAR2  default null
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_description  in out  VARCHAR2
      );
   procedure ins
      (n_buff  in out  test_sets_ACT%ROWTYPE);

   procedure upd
      (o_id_in  in  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1_in  in  VARCHAR2  default null
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      );
   procedure upd
      (n_buff  in out  test_sets_ACT%ROWTYPE);

   procedure del
      (o_id_in  in  NUMBER
      );

end test_sets_dml;
/
select 'TEST_SETS_DML' as "Package:"
 from  user_errors
 where name  = 'TEST_SETS_DML'
  and  type  = 'PACKAGE'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_DML'
  and  type = 'PACKAGE'
 order by sequence
/

create package body test_sets_view
is

-- Package Body Test_Sets_View
--    View functions
--    (DML, Foreign Keys, Paths, and )

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1  in  VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View insert procedure
is
begin
   if util.db_object_exists('TEST_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Insert not allowed on materialized view test_sets.  Inserts on test_sets must be performed on the central database.');
   end if;
   -- Set n_global_set, if needed
   if     n_global_set is null
      and n_global_parms_nk1 is not null
   then
      n_global_set := 
         global_parms_dml.get_id
            (n_global_parms_nk1
            );
   end if;
   -- Set n_parm_set, if needed
   if     n_parm_set is null
      and n_parm_sets_nk1 is not null
   then
      n_parm_set := 
         parm_sets_dml.get_id
            (n_parm_sets_nk1
            );
   end if;
   if not glob.get_db_constraints
   then
      test_sets_tab.ins
         (n_id
         ,n_user_name
         ,n_global_set
         ,n_test_name
         ,n_parm_set
         ,n_description
         );
   end if;
   insert into test_sets
         (id
         ,user_name
         ,global_set
         ,test_name
         ,parm_set
         ,description
         )
   values
         (n_id
         ,n_user_name
         ,n_global_set
         ,n_test_name
         ,n_parm_set
         ,n_description
         );
end ins;
----------------------------------------
procedure upd
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,n_user_name  in out  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_global_parms_nk1  in  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1  in  VARCHAR2
      ,o_test_name  in  VARCHAR2
      ,n_test_name  in out  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_parm_sets_nk1  in  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1  in  VARCHAR2
      ,o_description  in  VARCHAR2
      ,n_description  in out  VARCHAR2
      )
   -- View Update procedure
is
begin
   if util.db_object_exists('TEST_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Update not allowed on materialized view test_sets.  Updates on test_sets must be performed on the central database.');
   end if;
   -- Set n_global_set, if needed
   if     n_global_set = o_global_set
      and (   not (n_global_parms_nk1 = o_global_parms_nk1)
          )
   then
      n_global_set := 
         global_parms_dml.get_id
            (n_global_parms_nk1
            );
   end if;
   -- Set n_parm_set, if needed
   if     n_parm_set = o_parm_set
      and (   not (n_parm_sets_nk1 = o_parm_sets_nk1)
          )
   then
      n_parm_set := 
         parm_sets_dml.get_id
            (n_parm_sets_nk1
            );
   end if;
   if not glob.get_db_constraints
   then
      test_sets_tab.upd
         (o_id
         ,o_user_name
         ,n_user_name
         ,o_global_set
         ,n_global_set
         ,o_test_name
         ,n_test_name
         ,o_parm_set
         ,n_parm_set
         ,o_description
         ,n_description
         );
   end if;
   update test_sets TS
     set  TS.user_name = n_user_name
         ,TS.global_set = n_global_set
         ,TS.test_name = n_test_name
         ,TS.parm_set = n_parm_set
         ,TS.description = n_description
    where TS.id = o_id;
end upd;
----------------------------------------
procedure del
      (o_id  in  NUMBER
      ,o_user_name  in  VARCHAR2
      ,o_global_set  in  NUMBER
      ,o_test_name  in  VARCHAR2
      ,o_parm_set  in  NUMBER
      ,o_description  in  VARCHAR2
      )
is
begin
   if util.db_object_exists('TEST_SETS', 'MATERIALIZED VIEW')
   then
      raise_application_error(-20010, 'Delete not allowed on materialized view test_sets.  Deletes on test_sets must be performed on the central database.');
   end if;
   if not glob.get_db_constraints
   then
      test_sets_tab.del
         (o_id
         ,o_user_name
         ,o_global_set
         ,o_test_name
         ,o_parm_set
         ,o_description
         );
   end if;
   delete from test_sets TS
    where TS.id = o_id;
end del;
----------------------------------------
end test_sets_view;
/
select 'TEST_SETS_VIEW' as "Package Body:"
 from  user_errors
 where name  = 'TEST_SETS_VIEW'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_VIEW'
  and  type = 'PACKAGE BODY'
 order by sequence
/

create package body test_sets_dml
is

 -- Package Body Test_Sets_Dml
 -- (Data Manipulation Language, Foreign Key and Path Lookup)

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:22 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 


----------------------------------------
function get_next_id
      return number
is
   retid  number;
begin
   select test_sets_seq.nextval
    into  retid from dual;
   return retid;
end get_next_id;
----------------------------------------
function get_curr_id
      return number
is
   retid  number;
begin
   select test_sets_seq.currval
    into  retid from dual;
   return retid;
end get_curr_id;
----------------------------------------
function get_id
      (test_sets_nk1  in  VARCHAR2
      ,test_sets_nk2  in  VARCHAR2
      ,test_sets_nk3  in  VARCHAR2
      ,test_sets_nk4  in  VARCHAR2
      ) return number
   -- For all the Natural Key Columns, Return an ID
is
   retid  number(38);
begin
   select id
    into  retid
    from  test_sets  TS
    where TS.user_name = test_sets_nk1
     and  TS.global_set = global_parms_dml.get_id
             (test_sets_nk2
             )
     and  TS.test_name = test_sets_nk3
     and  TS.parm_set = parm_sets_dml.get_id
             (test_sets_nk4
             )
    ;
   return retid;
exception
   when no_data_found
   then
      return null;
   when others
   then
      raise;
end get_id;
----------------------------------------
function get_nk
      (id_in  in  number)
   return varchar2
   -- For an ID, return a delimited list of Natural Key Values
is
   rtxt  varchar2(32767);
begin
   select substr(   TS.user_name
    || util.nk_sep || global_parms_dml.get_nk(TS.global_set)
    || util.nk_sep || TS.test_name
    || util.nk_sep || parm_sets_dml.get_nk(TS.parm_set)
                         ,1,32767)
    into  rtxt
    from  test_sets TS
    where TS.id = id_in;
   return rtxt;
exception
   when no_data_found then
      return null;
   when others then
      raise;
end get_nk;
----------------------------------------
function tab_to_col
      (id_in  in  number)
   return col_type
is
   -- This function is duplicated in test_sets_POP
   cursor acur is
      select * from test_sets
       where id = id_in;
   abuf   acur%ROWTYPE;
   rcol      col_type;
begin
   open acur;
   fetch acur into abuf;
   if acur%NOTFOUND
   then
      rcol := COL_TYPE(null);
      close acur;
      return rcol;
   end if;
   rcol := COL_TYPE
             (PAIR_TYPE('user_name', abuf.user_name)
             ,PAIR_TYPE('global_set', to_char(abuf.global_set))
             ,PAIR_TYPE('test_name', abuf.test_name)
             ,PAIR_TYPE('parm_set', to_char(abuf.parm_set))
             ,PAIR_TYPE('description', abuf.description)
                );
   close acur;
   return rcol;
end tab_to_col;
----------------------------------------
procedure clear
      (n_buff  in out  test_sets_ACT%ROWTYPE)
   -- Clear a %ROWTYPE buffer
is
begin
   n_buff.id := null;
   n_buff.user_name := null;
   n_buff.global_set := null;
   n_buff.global_parms_nk1 := null;
   n_buff.test_name := null;
   n_buff.parm_set := null;
   n_buff.parm_sets_nk1 := null;
   n_buff.description := null;
end clear;
----------------------------------------
procedure ins
      (n_id  in out  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1_in  in  VARCHAR2  default null
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_description  in out  VARCHAR2
      )
   -- Application Insert procedure
is
begin
   test_sets_view.ins
      (n_id
      ,n_user_name
      ,n_global_set
      ,n_global_parms_nk1_in
      ,n_test_name
      ,n_parm_set
      ,n_parm_sets_nk1_in
      ,n_description
      );
end ins;
----------------------------------------
procedure ins
      (n_buff  in out  test_sets_ACT%ROWTYPE)
   -- Application Insert procedure with %ROWTYPE
is
begin
   test_sets_dml.ins
      (n_buff.id
      ,n_buff.user_name
      ,n_buff.global_set
      ,n_buff.global_parms_nk1
      ,n_buff.test_name
      ,n_buff.parm_set
      ,n_buff.parm_sets_nk1
      ,n_buff.description
      );
end ins;
----------------------------------------
procedure upd
      (o_id_in  in  NUMBER
      ,n_user_name  in out  VARCHAR2
      ,n_global_set  in out  NUMBER
      ,n_global_parms_nk1_in  in  VARCHAR2  default null
      ,n_test_name  in out  VARCHAR2
      ,n_parm_set  in out  NUMBER
      ,n_parm_sets_nk1_in  in  VARCHAR2  default null
      ,n_description  in out  VARCHAR2
      ,nkdata_provided_in  in   VARCHAR2  default 'Y'
      )
   -- Application Update procedure
is
   o_user_name  VARCHAR2(30);
   o_global_set  NUMBER(38);
   o_global_parms_nk1  VARCHAR2(1);
   n_global_parms_nk1  VARCHAR2(1);
   o_test_name  VARCHAR2(60);
   o_parm_set  NUMBER(38);
   o_parm_sets_nk1  VARCHAR2(30);
   n_parm_sets_nk1  VARCHAR2(30);
   o_description  VARCHAR2(2000);
begin
   -- Retrieve the old (before update) data
   select TS.user_name
         ,TS.global_set
         ,TS.global_parms_nk1
         ,TS.test_name
         ,TS.parm_set
         ,TS.parm_sets_nk1
         ,TS.description
    into  o_user_name
         ,o_global_set
         ,o_global_parms_nk1
         ,o_test_name
         ,o_parm_set
         ,o_parm_sets_nk1
         ,o_description
    from  test_sets_act  TS
    where TS.id = o_id_in;
   -- Set the Natural Key data as indicated by NKDATA_PROVIDED
   if upper(substr(nvl(nkdata_provided_in,'Y'),1,1)) in ('Y','T')
   then
      -- Use the Natural Key Data that was provided
      n_global_parms_nk1 := n_global_parms_nk1_in;
      n_parm_sets_nk1 := n_parm_sets_nk1_in;
   else
      -- Use the old Natural Key Data
      n_global_parms_nk1 := o_global_parms_nk1;
      n_parm_sets_nk1 := o_parm_sets_nk1;
   end if;
   -- Run the update
   test_sets_view.upd
      (o_id_in
      ,o_user_name
      ,n_user_name
      ,o_global_set
      ,o_global_parms_nk1
      ,n_global_set
      ,n_global_parms_nk1
      ,o_test_name
      ,n_test_name
      ,o_parm_set
      ,o_parm_sets_nk1
      ,n_parm_set
      ,n_parm_sets_nk1
      ,o_description
      ,n_description
      );
end upd;
----------------------------------------
procedure upd
      (n_buff  in out  test_sets_ACT%ROWTYPE)
is
begin
   test_sets_dml.upd
      (n_buff.id
      ,n_buff.user_name
      ,n_buff.global_set
      ,n_buff.global_parms_nk1
      ,n_buff.test_name
      ,n_buff.parm_set
      ,n_buff.parm_sets_nk1
      ,n_buff.description
      ,'Y'
      );
end upd;
----------------------------------------
procedure del
      (o_id_in  in  NUMBER
      )
   -- Application Delete procedure
is
   o_user_name  VARCHAR2(30);
   o_global_set  NUMBER(38);
   o_test_name  VARCHAR2(60);
   o_parm_set  NUMBER(38);
   o_description  VARCHAR2(2000);
begin
   select TS.user_name
         ,TS.global_set
         ,TS.test_name
         ,TS.parm_set
         ,TS.description
    into  o_user_name
         ,o_global_set
         ,o_test_name
         ,o_parm_set
         ,o_description
    from  test_sets  TS
    where TS.id = o_id_in;
   test_sets_view.del
      (o_id_in
      ,o_user_name
      ,o_global_set
      ,o_test_name
      ,o_parm_set
      ,o_description
      );
end del;
----------------------------------------
end test_sets_dml;
/
select 'TEST_SETS_DML' as "Package Body:"
 from  user_errors
 where name  = 'TEST_SETS_DML'
  and  type  = 'PACKAGE BODY'
  and  rownum = 1
/
select '('||line||'/'||position||') '||text as error
 from  user_errors
 where name = 'TEST_SETS_DML'
  and  type = 'PACKAGE BODY'
 order by sequence
/



select ' -) create_aa  ' as FILE_NAME from dual;



select ' -) create_mods  ' as FILE_NAME from dual;


-- Script File "create_mods"
--    Create Program Modules

   -- Application: Unit Test Parameters
   -- Generated by DTGen (http://code.google.com/p/dtgen)
   -- October   02, 2012  08:18:32 PM

   --
   -- Copyright (c) 2012, Duane.Dieterich@gmail.com
   -- All rights reserved.
   -- 
   -- Redistribution and use in source and binary forms, with or without 
   -- modification, are permitted provided that the following conditions are 
   -- met:
   -- 
   -- Redistributions of source code must retain the above copyright notice, 
   -- this list of conditions and the following disclaimer.
   -- 
   -- Redistributions in binary form must reproduce the above copyright notice, 
   -- this list of conditions and the following disclaimer in the documentation 
   -- and/or other materials provided with the distribution.
   -- 
   -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
   -- IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
   -- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
   -- PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
   -- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
   -- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
   -- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
   -- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
   -- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
   -- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
   -- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   -- 




